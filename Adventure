import pygame
from pygame.locals import *
import pyganim
import pyglet
import sys

pygame.init()
# Создание окна игры
window_width = 896
window_height = 640
flags = 0  # Оконный или полноэкранный режим
screen = pygame.display.set_mode((window_width, window_height), flags, 32)


def toggle_screen():
    flags = FULLSCREEN
    screen = pygame.display.set_mode((window_width, window_height), flags, 32)


def toggle_fullscreen():
    flags = 0
    screen = pygame.display.set_mode((window_width, window_height), flags, 32)


white = (255, 255, 255)
green = (0, 255, 0)
red = (255, 0, 0)
blue = (0, 0, 255)

pygame.display.set_caption("Adventure")

# Изображения худа
background_color = pygame.image.load("fon1.png").convert_alpha()
background_color_2 = pygame.image.load("blue_desert.png").convert_alpha()
background_color_3 = pygame.image.load("colored_desert.png").convert_alpha()
background_color_4 = pygame.image.load("colored_shroom.png").convert_alpha()
button_menu = pygame.image.load("buttonStart.png").convert_alpha()
button_select = pygame.image.load("buttonSelect.png").convert_alpha()
hudCoin = pygame.image.load("hudCoin.png").convert_alpha()
hudHealth = pygame.image.load("hudHeart_full.png").convert_alpha()
hudHealthHalf = pygame.image.load("hudHeart_half.png").convert_alpha()
hudHealthEmpty = pygame.image.load("hudHeart_empty.png").convert_alpha()
hudPause = pygame.image.load("pause.png").convert_alpha()
hudBomb = pygame.image.load("bomb.png").convert_alpha()
hudBombNo = pygame.image.load("bombWhite.png").convert_alpha()
hudPlay = pygame.image.load("forward.png").convert_alpha()
hudAudio = pygame.image.load("audioOn.png").convert_alpha()
hudAudioOff = pygame.image.load("audioOff.png").convert_alpha()
hudFullcreen = pygame.image.load("larger.png").convert_alpha()
hudMenu = pygame.image.load("menuList.png").convert_alpha()
hudShop = pygame.image.load("cart.png").convert_alpha()
hudWindow = pygame.image.load("smaller.png").convert_alpha()
hudTrophy = pygame.image.load("trophy (2).png").convert_alpha()
hudQuit = pygame.image.load("power.png").convert_alpha()
hudMusic_on = pygame.image.load("musicOn.png").convert_alpha()
hudMusic_off = pygame.image.load("musicOff.png").convert_alpha()
hudReturn = pygame.image.load("return.png").convert_alpha()
hudBeigePlayer = pygame.image.load("Beige player.png").convert_alpha()
hudGreenPlayer = pygame.image.load("Green player.png").convert_alpha()
hudPinkPlayer = pygame.image.load("Pink player.png").convert_alpha()
hudBluePlayer = pygame.image.load("Blue player.png").convert_alpha()
hudYellowPlayer = pygame.image.load("Player.png").convert_alpha()
hudLockedPlayer = pygame.image.load("Locked.png").convert_alpha()
hudCheckMark = pygame.image.load("checkmark.png").convert_alpha()
hudSettings = pygame.image.load("gear.png").convert_alpha()
hudPlus = pygame.image.load("plus.png").convert_alpha()
hudLevel = pygame.image.load("Level.png").convert_alpha()
hudLevel_2 = pygame.image.load("hudPlayer_beige.png").convert_alpha()
hudLevel_3 = pygame.image.load("hudPlayer_pink.png").convert_alpha()
hudLevel_4 = pygame.image.load("hudPlayer_blue.png").convert_alpha()
hudLevel_5 = pygame.image.load("hudPlayer_green.png").convert_alpha()
hudNumber1 = pygame.image.load("hud1.png").convert_alpha()
hudNumber2 = pygame.image.load("hud2.png").convert_alpha()
hudNumber3 = pygame.image.load("hud3.png").convert_alpha()
hudNumber4 = pygame.image.load("hud4.png").convert_alpha()
hudNumber5 = pygame.image.load("hud5.png").convert_alpha()
hudQuitX = pygame.image.load("hudX.png").convert_alpha()
hudDoor = pygame.image.load("door.png").convert_alpha()
hudSave = pygame.image.load("save.png").convert_alpha()
hudSave_2 = pygame.image.load("save (2).png").convert_alpha()
hudStar = pygame.image.load("star.png").convert_alpha()
hudYellowKeyEmpty = pygame.image.load("hudKey_yellow_empty.png").convert_alpha()
hudYellowKey = pygame.image.load("hudKey_yellow.png").convert_alpha()

# Изменяем размеры
hudCoin_trans = pygame.transform.scale(hudCoin, (70, 70))
hudHealth_trans = pygame.transform.scale(hudHealth, (70, 70))
hudHealthHalf_trans = pygame.transform.scale(hudHealthHalf, (70, 70))
hudHealthEmpty_trans = pygame.transform.scale(hudHealthEmpty, (70, 70))
hudBomb_trans = pygame.transform.scale(hudBomb, (70, 70))
hudBombNo_trans = pygame.transform.scale(hudBombNo, (70, 70))
hudStar_trans = pygame.transform.scale(hudStar, (100, 100))

# Анимация
Anim_right = [("alienYellow_walk1.png", 0.1)]
Anim_stay = [("Player.png", 0.1)]
Anim_jump = [("alienYellow_jump.png", 0.1)]
Anim_hit = [("AlienYellow_hit.png", 1.0)]
Anim_climb = [("alienYellow_climb1.png", 0.1), ("alienYellow_climb2.png", 0.1)]
Anim_swim = [("alienYellow_swim1.png", 1.0), ("alienYellow_swim2.png", 1.0)]

Anim_beige_right = [("alienBeige_walk1.png", 0.1)]
Anim_beige_stay = [("beige player.png", 0.1)]
Anim_beige_jump = [("alienBeige_jump.png", 0.1)]
Anim_beige_hit = [("alienBeige_hit.png", 1.0)]
Anim_beige_climb = [("alienBeige_climb1.png", 0.1), ("alienBeige_climb2.png", 0.1)]
Anim_beige_swim = [("alienBeige_swim1.png", 1.0), ("alienBeige_swim2.png", 1.0)]

Anim_pink_right = [("alienPink_walk1.png", 0.1)]
Anim_pink_stay = [("Pink player.png", 0.1)]
Anim_pink_jump = [("alienPink_jump.png", 0.1)]
Anim_pink_hit = [("alienPink_hit.png", 1.0)]
Anim_pink_climb = [("alienPink_climb1.png", 0.1), ("alienPink_climb2.png", 0.1)]
Anim_pink_swim = [("alienPink_swim1.png", 1.0), ("alienPink_swim2.png", 1.0)]

Anim_blue_right = [("alienBlue_walk1.png", 0.1)]
Anim_blue_stay = [("Blue player.png", 0.1)]
Anim_blue_jump = [("alienBlue_jump.png", 0.1)]
Anim_blue_hit = [("alienBlue_hit.png", 1.0)]
Anim_blue_climb = [("alienBlue_climb1.png", 0.1), ("alienBlue_climb2.png", 0.1)]
Anim_blue_swim = [("alienBlue_swim1.png", 1.0), ("alienBlue_swim2.png", 1.0)]

Anim_green_right = [("alienGreen_walk1.png", 0.1)]
Anim_green_stay = [("Green player.png", 0.1)]
Anim_green_jump = [("alienGreen_jump.png", 0.1)]
Anim_green_hit = [("alienGreen_hit.png", 1.0)]
Anim_green_climb = [("alienGreen_climb1.png", 0.1), ("alienGreen_climb2.png", 0.1)]
Anim_green_swim = [("alienGreen_swim1.png", 1.0), ("alienGreen_swim2.png", 1.0)]


Anim_worm_dead = [("wormGreen_dead.png", 0.1)]
Anim_wormPink_dead = [("wormPink_dead.png", 0.1)]
Anim_mouse_dead = [("mouse_dead.png", 0.1)]
Anim_bee_dead = [("bee_dead.png", 0.1)]
Anim_fish_dead = [("fishBlue_dead.png", 0.1)]
Anim_worm_move = [("wormGreen.png", 0.1), ("wormGreen_move.png", 0.1)]
Anim_worm_pink = [("wormPink.png", 0.1), ("wormPink_move.png", 0.1)]
Anim_fly = [("fly.png", 0.1), ("fly_move.png", 0.1)]
Anim_fly_dead = [("fly_dead.png", 0.1)]
Anim_mouse = [("mouse.png", 0.1), ("mouse_move.png", 0.1)]
Anim_bee = [("bee.png", 0.1), ("bee_move.png", 0.1)]
Anim_fish_fall = [("fishBlue_fall.png", 0.1)]
Anim_fish = [("fishBlue.png", 0.1)]
Anim_fishGreen = [("fishGreen.png", 0.1), ("fishGreen_move.png", 0.1)]
Anim_fishGreen_dead = [("fishGreen_dead.png", 0.1)]
Anim_box = [("boxExplosive_used.png", 0.1)]
Anim_light_box = [("boxExplosive.png", 0.1)]
Anim_saw_dead = [("saw_dead.png", 0.1)]
Anim_spring = [("spring.png", 1.3)]
Anim_sprung = [("sprung.png", 0.1)]
Anim_door_mid = [("doorOpen_mid.png", 0.1)]
Anim_door_top = [("doorOpen_top.png", 0.1)]
Anim_door_mid_2 = [("doorClosed_mid.png", 0.1)]
Anim_door_top_2 = [("doorClosed_top.png", 0.1)]
Anim_boss_right = [("right.png", 0.1)]

# Музыка и дополнительные мелочи

pause_x = 20
pause_y = 30

start_x = 400
start_y = 300

audio_x = 830
audio_y = 570

audio_x_off = 830
audio_y_off = 570

fullScreen_x = 780
fullScreen_y = 570

shop_x = 830
shop_y = 20

menu_x = 830
menu_y = 20

window_x = 780
window_y = 570

trophy_x = 830
trophy_y = 60

quit_x = 830
quit_y = 100

music_x = 730
music_y = 570

return_x = 830
return_y = 180

return_x_2 = 685
return_y_2 = 570

bluePlayer_x = 490
bluePlayer_y = 100

greenPlayer_x = 620
greenPlayer_y = 100

pinkPlayer_x = 360
pinkPlayer_y = 100

beigePlayer_x = 230
beigePlayer_y = 100

yellowPlayer_x = 100
yellowPlayer_y = 100

yellowPlayer_x_2 = 400
yellowPlayer_y_2 = 80

bomb_x = 400
bomb_y = 350

locked_x = 265
locked_y = 360

check_x = 135
check_y = 360

settings_x = 830
settings_y = 570

plus_x = 555
plus_y = 295

coin_x = 700
coin_y = 15

coin_x_2 = 380
coin_y_2 = 380

level_x = 0
level_y = 0

number_1_x = 200
number_1_y = 200

number_2_x = 290
number_2_y = 200

number_3_x = 380
number_3_y = 200

number_4_x = 470
number_4_y = 200

number_5_x = 560
number_5_y = 200

locked_level_2_x = 330
locked_level_2_y = 320

locked_level_3_x = 420
locked_level_3_y = 320

locked_level_4_x = 510
locked_level_4_y = 320

locked_level_5_x = 600
locked_level_5_y = 320

select_x = 400
select_y = 360

quitX_x = 650
quitX_y = 200

door_x = 400
door_y = 200

save_x = 400
save_y = 250

save_2_x = 830
save_2_y = 143

clock = pygame.time.Clock()
pygame.time.delay(3000)

sound_click = pygame.mixer.Sound("Click3.wav")
locked_click = pygame.mixer.Sound("rollover1.wav")
wins_music = pygame.mixer.Sound("secosmic_lo.wav")
hit_worm = pygame.mixer.Sound("punch.wav")
sound_step = pygame.mixer.Sound("footstep05.ogg")
handleCoins = pygame.mixer.Sound("handleCoins.ogg")
explosion = pygame.mixer.Sound("boom.wav")
switch_1 = pygame.mixer.Sound("switch1.wav")
switch_button = pygame.mixer.Sound("switch10.wav")

main_music = pyglet.media.Player()  # Плеер
music_1 = pyglet.media.load("Adventure.mp3")  # Заглавная музыка 1
main_music.queue(music_1)  # Добавление в плеер и ожидание запуска

fon_music = pyglet.media.Player()
bee_music = pyglet.media.load("Sound bee.mp3")
fon_music.queue(bee_music)

box_open = pyglet.media.Player()
open_crate = pyglet.media.load("openBox.wav")
box_open.queue(open_crate)

fon_music_2 = pyglet.media.Player()
water_music = pyglet.media.load("Water.mp3")
fon_music_2.queue(water_music)

sound_jump = pyglet.media.Player()
jump_in_water = pyglet.media.load("Jump in water.mp3")
sound_jump.queue(jump_in_water)

rock_hits = pyglet.media.Player()
hits_metal = pyglet.media.load("Rock_Hits.wav")
rock_hits.queue(hits_metal)

horror_music = pyglet.media.Player()
horror_1 = pyglet.media.load("Horror.wav")
horror_music.queue(horror_1)

# Изображения главных героев
image_hero_1 = pygame.image.load("Player.png").convert_alpha()
image_hero_2 = pygame.image.load("Beige player.png").convert_alpha()
image_hero_3 = pygame.image.load("Pink player.png").convert_alpha()
image_hero_4 = pygame.image.load("Blue player.png").convert_alpha()
image_hero_5 = pygame.image.load("Green player.png").convert_alpha()

# Анимации желтого персонажа
yellow_anim_right = pyganim.PygAnimation(Anim_right)
yellow_anim_stay = pyganim.PygAnimation(Anim_stay)
yellow_anim_hit = pyganim.PygAnimation(Anim_hit)
yellow_anim_jump = pyganim.PygAnimation(Anim_jump)
yellow_anim_climb = pyganim.PygAnimation(Anim_climb)
yellow_anim_swim = pyganim.PygAnimation(Anim_swim)

# Анимации бежевого персонажа
beige_anim_right = pyganim.PygAnimation(Anim_beige_right)
beige_anim_stay = pyganim.PygAnimation(Anim_beige_stay)
beige_anim_hit = pyganim.PygAnimation(Anim_beige_hit)
beige_anim_jump = pyganim.PygAnimation(Anim_beige_jump)
beige_anim_climb = pyganim.PygAnimation(Anim_beige_climb)
beige_anim_swim = pyganim.PygAnimation(Anim_beige_swim)

# Анимации розового персонажа
pink_anim_right = pyganim.PygAnimation(Anim_pink_right)
pink_anim_stay = pyganim.PygAnimation(Anim_pink_stay)
pink_anim_hit = pyganim.PygAnimation(Anim_pink_hit)
pink_anim_jump = pyganim.PygAnimation(Anim_pink_jump)
pink_anim_climb = pyganim.PygAnimation(Anim_pink_climb)
pink_anim_swim = pyganim.PygAnimation(Anim_pink_swim)

# Анимации синего персонажа
blue_anim_right = pyganim.PygAnimation(Anim_blue_right)
blue_anim_stay = pyganim.PygAnimation(Anim_blue_stay)
blue_anim_hit = pyganim.PygAnimation(Anim_blue_hit)
blue_anim_jump = pyganim.PygAnimation(Anim_blue_jump)
blue_anim_climb = pyganim.PygAnimation(Anim_blue_climb)
blue_anim_swim = pyganim.PygAnimation(Anim_blue_swim)

# Анимации зеленого персонажа
green_anim_right = pyganim.PygAnimation(Anim_green_right)
green_anim_stay = pyganim.PygAnimation(Anim_green_stay)
green_anim_hit = pyganim.PygAnimation(Anim_green_hit)
green_anim_jump = pyganim.PygAnimation(Anim_green_jump)
green_anim_climb = pyganim.PygAnimation(Anim_green_climb)
green_anim_swim = pyganim.PygAnimation(Anim_green_swim)


# Создание спрайтов
class Hero(pygame.sprite.Sprite):
    def __init__(self):

        pygame.sprite.Sprite.__init__(self)

        self.image = image_hero_1
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        # Здоровье
        self.health = 100

        # Скины персонажа
        self.yellow = "T"  # На данный момент надет (T == True)
        self.beige = "F"
        self.pink = "F"
        self.blue = "F"
        self.green = "F"

        # Характеристики персонажа
        self.speed = 10
        self.jump = 250
        self.drop = 50

        # Инвентарь
        self.count_money = 0
        self.amount_bomb = 3
        self.star = 0

        # Расположение
        self.rect.x = 20
        self.rect.y = 314
        self.onGround = True  # Находимся на земле.

        # Загрузка анимации
        self.AnimationRight = yellow_anim_right
        self.AnimationStay = yellow_anim_stay
        self.AnimationHit = yellow_anim_hit
        self.AnimationJump = yellow_anim_jump
        self.AnimationClimb = yellow_anim_climb
        self.AnimationSwim = yellow_anim_swim

        # Личные данные
        self.level_1_completed = "F"
        self.level_2_completed = "F"
        self.level_3_completed = "F"
        self.level_4_completed = "F"

    def update(self, left_move, right_move, up_move, damage_mobs):

        if self.rect.x == 0:
            left_move = False

        if self.rect.x == 3880 and level_1_load is True:
            right_move = False

        if self.rect.x == 880 and level_2_load is True:
            right_move = False

        if self.rect.x == 4080 and level_4_load is True:
            right_move = False

        if self.rect.x == 1880 and level_5_load is True:
            right_move = False

        if left_move is True:
            """if audio_On is True and self.onGround is True:
                sound_step.play()"""

            self.rect.x -= self.speed
        if right_move is True:
            self.rect.x += self.speed
            # Проигрывание и зарисовка анимации
            self.AnimationRight.play()
            self.AnimationRight.blit(self.image, (0, 0))
            """if audio_On is True and self.onGround is True:
                sound_step.play()"""

        if self.onGround is False:
            self.AnimationJump.play()
            self.AnimationJump.blit(self.image, (0, 0))

        if not (right_move or left_move) is True and up_move is False:
            self.AnimationStay.play()
            self.AnimationStay.blit(self.image, (0, 0))


# Экземпляр игрока
player = pygame.sprite.Group()
yellow_hero = Hero()
player.add(yellow_hero)
left_move = right_move = up_move = False  # Кнопки не нажаты
damage_mobs = False  # Нет урона от моба
onGround = True  # Мы на земле


class HeroTwo(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("Beige player.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.speed = 5

        # Анимация
        self.Animation_right = pyganim.PygAnimation(Anim_beige_right)

    def update(self):

        self.rect.x += self.speed
        self.Animation_right.play()
        self.Animation_right.blit(self.image, (0, 0))


AI_player = pygame.sprite.Group()
beige_player = HeroTwo()
AI_player.add(beige_player)


class Boss(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("alienYellow_front.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 600
        self.rect.y = 404
        self.speed = 5
        self.health = 500
        self.damage = 10
        self.kickback = 50

        self.right_move = pyganim.PygAnimation(Anim_boss_right)

    def update(self):

        if yellow_hero.rect.x > self.rect.x:
            self.right_move.blit(self.image, (0, 0))
            self.right_move.play()

            self.rect.x += self.speed
        else:
            self.rect.x -= self.speed


boss_group = pygame.sprite.Group()
yellow_boss = Boss()
boss_group.add(yellow_boss)


blocks = pygame.sprite.Group()
blocks_2 = pygame.sprite.Group()
blocks_3 = pygame.sprite.Group()
planet_group = pygame.sprite.Group()


class Ground(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("grass.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        # Расположение
        self.rect.x = 0
        self.rect.y = 570


class Sand(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("Sand.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        # Расположение
        self.rect.x = 0
        self.rect.y = 570


class Planet(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("planetHalf_mid.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        # Расположение
        self.rect.x = 0
        self.rect.y = 570


# Печатаем блок уровня!
change_x = 0
while change_x < 4000:
    block_ground = Ground()
    block_ground.rect.x = change_x
    change_x += 127
    blocks.add(block_ground)

# Для третьего уровня
change_x = 0
while change_x < 2000:
    block_ground_2 = Ground()
    block_ground_2.rect.y = 350
    block_ground_2.rect.x = change_x
    change_x += 370
    blocks_2.add(block_ground_2)

# Спавним блоки для четвертого уровня
change_x = 0
while change_x < 1000:
    block_sand = Sand()
    block_sand.rect.x = change_x
    change_x += 127
    blocks_3.add(block_sand)

change_x = 1600
while change_x < 2600:
    block_sand_2 = Sand()
    block_sand_2.rect.x = change_x
    change_x += 127
    blocks_3.add(block_sand_2)

change_x = 3200
while change_x < 4200:
    block_sand_3 = Sand()
    block_sand_3.rect.x = change_x
    change_x += 127
    blocks_3.add(block_sand_3)

change_x = 500
while change_x < 1000:
    block_sand_up = Sand()
    block_sand_up.rect.x = change_x
    block_sand_up.rect.y = 200
    change_x += 127
    blocks_3.add(block_sand_up)

change_x = 2100
while change_x < 2300:
    block_sand_up_2 = Sand()
    block_sand_up_2.rect.x = change_x
    block_sand_up_2.rect.y = 200
    change_x += 127
    blocks_3.add(block_sand_up_2)

change_x = 2350
while change_x < 2600:
    block_sand_up_3 = Sand()
    block_sand_up_3.rect.x = change_x
    block_sand_up_3.rect.y = 200
    change_x += 127
    blocks_3.add(block_sand_up_3)

block_ground_2_up = Ground()
block_ground_2_end = Ground()
blocks_2.add(block_ground_2_up)
blocks_2.add(block_ground_2_end)

# Для пятого уровня
change_x = 0
while change_x < 2000:
    block_planet = Planet()
    block_planet.rect.x = change_x
    change_x += 127
    planet_group.add(block_planet)


class Money(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("coinBronze.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 400
        self.rect.y = 460


drop_money = pygame.sprite.Group()  # Группа с падающимися монетами

money = pygame.sprite.Group()
money_2 = pygame.sprite.Group()

# Первая точка появления
change_x = 400

while change_x <= 750:
    money_bronze = Money()
    money_bronze.rect.x = change_x
    change_x += 150
    money.add(money_bronze)

# Вторая точка появления
change_x = 1100
while change_x <= 1450:
    money_bronze = Money()
    money_bronze.rect.x = change_x
    change_x += 150
    money.add(money_bronze)

appear_1 = 1
while appear_1 <= 4:
    money_bronze_2 = Money()
    drop_money.add(money_bronze_2)
    appear_1 += 1

# Для третьего уровня
change_x = 370
while change_x < 1800:
    money_bronze_3 = Money()
    money_bronze_3.rect.y = 240
    money_bronze_3.rect.x = change_x
    change_x += 370
    money_2.add(money_bronze_3)


class MoneyGold(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("coinGold.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 1800
        self.rect.y = 460


# Золотая монета
money_wins = pygame.sprite.Group()
money_gold = MoneyGold()
money_wins.add(money_gold)
drop_money.add(money_gold)


class Worm_green(pygame.sprite.Sprite):
    def __init__(self):

        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("wormGreen.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 1000
        self.rect.y = 443
        self.speed = 5

        self.health = 100
        self.damage = 10
        self.kickback = 30

        # Анимация
        self.Anim_worm_green = pyganim.PygAnimation(Anim_worm_dead)
        self.Anim_worm_green_move = pyganim.PygAnimation(Anim_worm_move)

    def update(self):

        self.rect.x += self.speed
        self.Anim_worm_green_move.play()
        self.Anim_worm_green_move.blit(self.image, (0, 0))

        if self.rect.x < 600:
            self.speed *= -1

        if self.rect.x > 1001:
            self.speed *= -1

        if self.health <= 0:
            self.Anim_worm_green.play()
            self.Anim_worm_green.blit(self.image, (0, 0))


class Worm_pink(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("wormPink.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 1700
        self.rect.y = 443
        self.speed = 5

        self.health = 100
        self.damage = 10
        self.kickback = 30

        # Анимация
        self.AnimwormPink_move = pyganim.PygAnimation(Anim_worm_pink)
        self.Anim_wormPink_dead = pyganim.PygAnimation(Anim_wormPink_dead)

    def update(self):

        self.rect.x += self.speed
        self.AnimwormPink_move.play()
        self.AnimwormPink_move.blit(self.image, (0, 0))

        if self.rect.x < 1200:
            self.speed *= -1

        if self.rect.x > 1701:
            self.speed *= -1

        if self.health <= 0:
            self.Anim_wormPink_dead.play()
            self.Anim_wormPink_dead.blit(self.image, (0, 0))


mobs_worm = pygame.sprite.Group()
worm = Worm_green()
worm_pink = Worm_pink()
mobs_worm.add(worm)
mobs_worm.add(worm_pink)


class Jump(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("sprung.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 300
        self.rect.y = 443

        self.increaseJump = 1.5

        self.Anim_jump_on = pyganim.PygAnimation(Anim_spring)
        self.Anim_jump_off = pyganim.PygAnimation(Anim_sprung)

    def update(self):
        if crossing_sprung is True:
            self.Anim_jump_on.play()
            self.Anim_jump_on.blit(self.image, (0, 0))
        else:
            self.Anim_jump_off.play()
            self.Anim_jump_off.blit(self.image, (0, 0))


sprung = pygame.sprite.Group()
jump_1 = Jump()
sprung.add(jump_1)


class Bomb(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("bomb.png").convert_alpha()
        self.image = pygame.transform.scale(self.image, (100, 100))
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.drop = 10  # Скорость падения
        self.damage = 100 # Урон бомбы
        self.kickback = 30 # Отталкивание от взрыва


inventory = pygame.sprite.Group()
bomb = Bomb()
inventory.add(bomb)


class Star(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("star.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 3700
        self.rect.y = 443


wins = pygame.sprite.Group()
star_wins = Star()
wins.add(star_wins)


class Fly(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("fly.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 2000
        self.rect.y = 30

        self.speed = 12
        self.damage = 20
        self.kickback = 50
        self.health = 100
        self.drop = 0

        self.Anim_fly = pyganim.PygAnimation(Anim_fly)
        self.Anim_fly_dead = pyganim.PygAnimation(Anim_fly_dead)

    def update(self):
        self.rect.x += self.speed

        self.Anim_fly.blit(self.image, (0, 0))
        self.Anim_fly.play()

        if self.rect.x <= 1800:
            self.speed *= -1

        if self.rect.x >= 2200:
            self.speed *= -1

        if self.health <= 0:
            self.Anim_fly_dead.play()
            self.Anim_fly_dead.blit(self.image, (0, 0))


mobs_fly = pygame.sprite.Group()
fly = Fly()
mobs_fly.add(fly)


class FireBall(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("fireball.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()
        self.rect.x = fly.rect.x
        self.rect.y = fly.rect.y
        self.speed = 15

    def update(self):
        self.rect.y += self.speed


particles = pygame.sprite.Group()
fire = FireBall()
particles.add(fire)


class Mouse(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("mouse.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 2500
        self.rect.y = 443

        self.speed = 17
        self.health = 100
        self.damage = 15
        self.kickback = 50

        self.AnimMouse = pyganim.PygAnimation(Anim_mouse)
        self.AnimMouse_dead = pyganim.PygAnimation(Anim_mouse_dead)

    def update(self):

        self.rect.x -= self.speed

        self.AnimMouse.play()
        self.AnimMouse.blit(self.image, (0, 0))

        if self.rect.x < 2200:
            self.speed *= -1
        if self.rect.x > 2800:
            self.speed *= - 1

        if self.health <= 0:
            self.AnimMouse_dead.play()
            self.AnimMouse_dead.blit(self.image, (0, 0))


mouse = Mouse()
mobs_worm.add(mouse)


class Mouse_2(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("mouse.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 3400
        self.rect.y = 443

        self.speed = 17
        self.health = 100
        self.damage = 15
        self.kickback = 50

        self.AnimMouse_dead = pyganim.PygAnimation(Anim_mouse_dead)
        self.AnimMouse = pyganim.PygAnimation(Anim_mouse)

    def update(self):

        self.rect.x -= self.speed

        self.AnimMouse.play()
        self.AnimMouse.blit(self.image, (0, 0))

        if self.rect.x < 3200:
            self.speed *= -1
        if self.rect.x > 3800:
            self.speed *= - 1

        if self.health <= 0:
            self.AnimMouse_dead.play()
            self.AnimMouse_dead.blit(self.image, (0, 0))


mouse_2 = Mouse_2()
mobs_worm.add(mouse_2)


class Exit(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("signExit.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 3870
        self.rect.y = 450


table = pygame.sprite.Group()
exit_level = Exit()
table.add(exit_level)


class YellowBox(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("lockYellow.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 700
        self.rect.y = 443


box = pygame.sprite.Group()
yellow_box = YellowBox()
box.add(yellow_box)


class Bee(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("bee.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 800
        self.rect.y = 50

        self.health = 255
        self.damage = 10
        self.speed = 10
        self.kickback = 50
        self.drop = 5

        # Анимация
        self.Anim_bee_dead = pyganim.PygAnimation(Anim_bee_dead)
        self.Anim_bee_move = pyganim.PygAnimation(Anim_bee)

    def update(self, go_attack):

        if go_attack is False and return_in_usual is False:
            self.rect.x -= self.speed

        if self.health <= 0:
            self.rect.y += self.drop
            self.Anim_bee_dead.play()
            self.Anim_bee_dead.blit(self.image, (0, 0))

        if self.rect.x <= 100 and go_attack is False and return_in_usual is False:
            self.speed *= -1
        if self.rect.x >= 900 and go_attack is False and return_in_usual is False:
            self.speed *= - 1

        if self.health > 0:
            self.Anim_bee_move.play()
            self.Anim_bee_move.blit(self.image, (0, 0))

    def attack(self, go_attack, collide_ground, return_in_usual):
        if go_attack is True:
            if self.rect.x > yellow_hero.rect.x:
                if self.speed > 0:
                    # Разворачиваемся
                    self.speed *= -1
                    # Уменьшаем x
                    self.rect.x += self.speed
                    # Опускаемся
                    if collide_ground is False:
                        self.rect.y -= self.speed
                else:
                    # Не разворачиваемся
                    # Уменьшаем х
                    self.rect.x += self.speed
                    # Опускаемся
                    if collide_ground is False:
                        self.rect.y -= self.speed
            elif self.rect.x <= yellow_hero.rect.x:
                if self.speed > 0:
                    # Увеличиваем х
                    self.rect.x += self.speed
                    # Опускаемся
                    if collide_ground is False:
                        self.rect.y += self.speed
                else:
                    # Разворачиваемся
                    self.speed *= -1
                    # Увеличиваем х
                    self.rect.x -= self.speed
                    # Увеличиваем y и опускаемся
                    if collide_ground is False:
                        self.rect.y -= self.speed
        if return_in_usual is True:
            if self.speed >= 0:
                self.rect.y -= self.speed
            else:
                self.rect.y += self.speed


mobs_fly_level_2 = pygame.sprite.Group()
bee = Bee()
go_attack = False
collide_ground = False
return_in_usual = False
mobs_fly_level_2.add(bee)


class GemRed(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("gemRed.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 300
        self.rect.y = -200

        self.drop = 10

    def update(self):
        self.rect.y += self.drop

bonus = pygame.sprite.Group()
gemRed = GemRed()
bonus.add(gemRed)


class Key(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("keyYellow.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 0
        self.rect.y = 0


keys = pygame.sprite.Group()
yellow_key = Key()
keys.add(yellow_key)


class Water(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("water.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 0
        self.rect.y = 520


class WaterHigh(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("waterTop_high.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 0
        self.rect.y = 392


water_blocks = pygame.sprite.Group()
change_x = 0
while change_x < 3000:
    water = Water()
    water.rect.x = change_x
    water_high = WaterHigh()
    water_high.rect.x = change_x
    change_x += 128
    water_blocks.add(water)
    water_blocks.add(water_high)


class Fish(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("fishBlue.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 175
        self.rect.y = 300
        self.speed = 12
        self.drop = 15
        self.health = 100
        self.damage = 30
        self.kickback = 30

        self.Anim_dead = pyganim.PygAnimation(Anim_fish_dead)
        self.Anim_fish_fall = pyganim.PygAnimation(Anim_fish_fall)
        self.Anim_fish = pyganim.PygAnimation(Anim_fish)

    def update(self):
        self.rect.y -= self.speed

        if self.rect.y <= 200:
            self.Anim_fish_fall.play()
            self.Anim_fish_fall.blit(self.image, (0, 0))
            self.speed *= -1

        if self.rect.y >= 550:
            self.Anim_fish.play()
            self.Anim_fish.blit(self.image, (0, 0))
            self.speed *= -1

        if self.health <= 0:
            self.Anim_dead.play()
            self.Anim_dead.blit(self.image, (0, 0))


swim_mobs = pygame.sprite.Group()
fish_1 = Fish()
fish_2 = Fish()
fish_3 = Fish()
fish_4 = Fish()
swim_mobs.add(fish_1)
swim_mobs.add(fish_2)
swim_mobs.add(fish_3)
swim_mobs.add(fish_4)


class GreenFish(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("fishGreen.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 2500
        self.rect.y = 410
        self.speed = 10
        self.drop = 15
        self.health = 100
        self.damage = 10
        self.kickback = 30

        self.AnimGreenfish = pyganim.PygAnimation(Anim_fishGreen)
        self.AnimGreenfish_dead = pyganim.PygAnimation(Anim_fishGreen_dead)

    def update(self):

        self.rect.x += self.speed

        if self.rect.x >= 2800:
            self.speed *= -1

        if self.rect.x <= 2300:
            self.speed *= - 1

        if self.health <= 0:
            self.AnimGreenfish_dead.play()
            self.AnimGreenfish_dead.blit(self.image, (0, 0))
        else:
            self.AnimGreenfish.play()
            self.AnimGreenfish.blit(self.image, (0, 0))


green_fish_1 = GreenFish()
swim_mobs.add(green_fish_1)


class Stone(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("rock.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 2260
        self.rect.y = 130
        self.drop = 0

    def update(self):

        self.rect.y += self.drop


stone_group = pygame.sprite.Group()
rock = Stone()
stone_group.add(rock)


class Box(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("boxExplosive.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 1700
        self.rect.y = 370

        self.Anim_box = pyganim.PygAnimation(Anim_box)
        self.Anim_light_box = pyganim.PygAnimation(Anim_light_box)

    def update(self):
        if box_used is True:
            self.Anim_box.play()
            self.Anim_box.blit(self.image, (0, 0))
        else:
            self.Anim_light_box.play()
            self.Anim_light_box.blit(self.image, (0, 0))


game_box = pygame.sprite.Group()
info_box = Box()
game_box.add(info_box)


class Saw(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("saw.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 350
        self.rect.y = 400
        self.health = 100

        self.Anim_dead = pyganim.PygAnimation(Anim_saw_dead)

    def update(self):
        if self.health <= 0:
            self.Anim_dead.play()
            self.Anim_dead.blit(self.image, (0, 0))


neutral_mobs = pygame.sprite.Group()
saw_1 = Saw()
neutral_mobs.add(saw_1)


class Lava(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("lavaTop_low.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 1000
        self.rect.y = 570
        self.damage = 30


lava_blocks = pygame.sprite.Group()

change_x = 1000
while change_x < 1600:
    lava_1 = Lava()
    lava_1.rect.x = change_x
    change_x += 127
    lava_blocks.add(lava_1)

change_x = 2600
while change_x < 3200:
    lava_2 = Lava()
    lava_2.rect.x = change_x
    change_x += 127
    lava_blocks.add(lava_2)


class Spikes(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("spikes.png").convert_alpha()
        self.image = pygame.transform.rotate(self.image, 180).convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 800
        self.rect.y = 300
        self.drop = 0
        self.damage = 100

    def update(self):
        if rock_dead is True:
            self.rect.y += self.drop


cliff_group = pygame.sprite.Group()
spikes_1 = Spikes()
cliff_group.add(spikes_1)


class DoorCloseMid(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("doorClosed_mid.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 2480
        self.rect.y = 450
        self.open = False

        self.Anim_door_open = pyganim.PygAnimation(Anim_door_mid)
        self.Anim_door_close = pyganim.PygAnimation(Anim_door_mid_2)

    def update(self):
        if self.open is True:
            self.Anim_door_open.play()
            self.Anim_door_open.blit(self.image, (0, 0))
        else:
            self.Anim_door_close.play()
            self.Anim_door_close.blit(self.image, (0, 0))


door_group = pygame.sprite.Group()
door_mid_1 = DoorCloseMid()
door_mid_2 = DoorCloseMid()
door_group.add(door_mid_1)
door_group.add(door_mid_2)


class DoorCloseTop(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("doorClosed_top.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 2480
        self.rect.y = 350
        self.open = False

        self.Anim_door_open = pyganim.PygAnimation(Anim_door_top)
        self.Anim_door_close = pyganim.PygAnimation(Anim_door_top_2)

    def update(self):
        if self.open is True:
            self.Anim_door_open.blit(self.image, (0, 0))
            self.Anim_door_open.play()
        else:
            self.Anim_door_close.blit(self.image, (0, 0))
            self.Anim_door_close.play()


door_top_1 = DoorCloseTop()
door_top_2 = DoorCloseTop()
door_group.add(door_top_1)
door_group.add(door_top_2)


class Ladder(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load("ladderMid.png").convert_alpha()
        self.image.set_colorkey(white)

        self.rect = self.image.get_rect()

        self.rect.x = 2300
        self.rect.y = 410


ladder_group = pygame.sprite.Group()
change_y = 430
while change_y >= 50:
    ladder_1 = Ladder()
    ladder_1.rect.y = change_y
    change_y -= 127
    ladder_group.add(ladder_1)


class Camera(object):
    def __init__(self, camera_func, width_cam, height_cam):
        self.camera_func = camera_func
        self.state = Rect(0, 0, width_cam, height_cam)

    def apply(self, target):
        return target.rect.move(self.state.topleft)

    def update(self, target):
        self.state = self.camera_func(self.state, target.rect)


def camera_configure(camera, target_rect):
    l, t, _, _ = target_rect
    _, _, w, h = camera
    l = -l + window_width / 2
    t = -t + window_height / 2

    l = min(0, l)
    l = max(-(camera.width - window_width), l)
    t = max(-(camera.height - window_height), t)
    t = min(0, t)
    return Rect(l, t, w, h)


total_level_1_width = 4000  # Длина первого уровня
total_level_1_height = 1000  # Высота первого уровня

total_level_2_width = 1000  # Длина второго уровня
total_level_2_height = 1000  # Высота второго уровня

total_level_3_width = 3000  # Длина третьего уровня
total_level_3_height = 640  # Высота третьего уровня

total_level_4_width = 4200
total_level_4_height = 1000

total_level_5_width = 2000
total_level_5_height = 1000

# Экземпляр динамической камеры
camera = Camera(camera_configure, total_level_1_width, total_level_1_height)
camera_2 = Camera(camera_configure, total_level_2_width, total_level_2_height)
camera_3 = Camera(camera_configure, total_level_3_width, total_level_3_height)
camera_4 = Camera(camera_configure, total_level_4_width, total_level_4_height)
camera_5 = Camera(camera_configure, total_level_5_width, total_level_5_height)

# Совокупность экземпляров спрайтов
entities = pygame.sprite.Group()
entities_level_2 = pygame.sprite.Group()
entities_level_3 = pygame.sprite.Group()
entities_level_4 = pygame.sprite.Group()
entities_level_5 = pygame.sprite.Group()


# Загрузка сохранений
def load():
    f = open("Save.txt", "r")
    yellow_hero.count_money = int(f.read(3))
    yellow_hero.star = int(f.read(3))
    yellow_hero.amount_bomb = int(f.read(4))
    yellow_hero.level_1_completed = f.read(1)
    yellow_hero.level_2_completed = f.read(1)
    yellow_hero.level_3_completed = f.read(1)
    yellow_hero.level_4_completed = f.read(1)
    yellow_hero.yellow = f.read(1)
    yellow_hero.beige = f.read(1)

    if yellow_hero.beige == "T":
        yellow_hero.image = image_hero_2
        yellow_hero.AnimationRight = beige_anim_right
        yellow_hero.AnimationStay = beige_anim_stay
        yellow_hero.AnimationJump = beige_anim_jump
        yellow_hero.AnimationHit = beige_anim_hit
        yellow_hero.AnimationClimb = beige_anim_climb
        yellow_hero.AnimationSwim = beige_anim_swim

    yellow_hero.pink = f.read(1)

    if yellow_hero.pink == "T":
        yellow_hero.image = image_hero_3
        yellow_hero.AnimationRight = pink_anim_right
        yellow_hero.AnimationStay = pink_anim_stay
        yellow_hero.AnimationJump = pink_anim_jump
        yellow_hero.AnimationHit = pink_anim_hit
        yellow_hero.AnimationClimb = pink_anim_climb
        yellow_hero.AnimationSwim = pink_anim_swim

    yellow_hero.blue = f.read(1)

    if yellow_hero.blue == "T":
        yellow_hero.image = image_hero_4
        yellow_hero.AnimationRight = blue_anim_right
        yellow_hero.AnimationStay = blue_anim_stay
        yellow_hero.AnimationJump = blue_anim_jump
        yellow_hero.AnimationHit = blue_anim_hit
        yellow_hero.AnimationClimb = blue_anim_climb
        yellow_hero.AnimationSwim = blue_anim_swim

    yellow_hero.green = f.read(1)

    if yellow_hero.green == "T":
        yellow_hero.image = image_hero_5
        yellow_hero.AnimationRight = green_anim_right
        yellow_hero.AnimationStay = green_anim_stay
        yellow_hero.AnimationJump = green_anim_jump
        yellow_hero.AnimationHit = green_anim_hit
        yellow_hero.AnimationClimb = green_anim_climb
        yellow_hero.AnimationSwim = green_anim_swim
    f.close()

load()


def pause():
    pause = True

    while pause:

        crossing = False  # Пересечение с кнопкой активации
        crossing_2 = False  # Пересечение с кнопкой выхода в меню

        for x_3 in range(pause_x, pause_x + 30):
            for y_3 in range(pause_y, pause_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing = True

        for x_3 in range(door_x, door_x + 30):
            for y_3 in range(door_y, door_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_2 = True

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == MOUSEBUTTONDOWN:
                if event.button == 1 and crossing is True and level_1_load is True:
                    rungame(left_move, right_move, up_move, damage_mobs)
                if event.button == 1 and crossing is True and level_2_load is True:
                    rungame_level_2(left_move, right_move, up_move, damage_mobs, collide_ground, go_attack, return_in_usual)
                if event.button == 1 and crossing_2 is True:
                    menu()

        screen.blit(hudDoor, (door_x, door_y))
        screen.blit(hudSave, (save_x, save_y))
        pygame.display.update()

    return None


def rungame(f_left_move, f_right_move, f_up_move, f_damage_mobs):
    launch_of_game = True  # Игра запущена!
    confirmation = False  # Бомба не установлена!
    stop_game = False  # Игра не остановлена
    download_bomb = 0  # Количество установленных бомб!
    time = 0  # Время игры
    time_death = 0  # Время убийства зеленого червя
    time_death_2 = 0  # Время убийства розового червя
    time_death_3 = 0  # Время убийства первой мыши
    time_death_4 = 0  # Время убийства второй мыши
    global game_completed
    game_completed = False  # Уровень не пройден.
    dead_player = False  # Игрок не умер
    worm_death = False  # Зеленый червь не умер
    worm_pink_death = False  # Розовый червь не умер
    mouse_death = False  # Мышь не сдохла
    mouse_death_2 = False  # Вторая мышь не сдохла

    # Обновляем характеристики персонажа
    yellow_hero.health = 100  # Обновляем значение здоровья
    yellow_hero.rect.x = 20  # Обновляем координаты х
    yellow_hero.rect.y = 314  # Обновляем координату y

    # Обновляем характеристики червя
    worm.health = 100
    worm.damage = 10
    worm.speed = 5
    worm.kickback = 30

    # Обновляем характеристики розового червя
    worm_pink.health = 100
    worm_pink.damage = 10
    worm_pink.speed = 5
    worm_pink.kickback = 30

    # Обновляем характеристики мыши
    mouse.health = 100
    mouse.damage = 15
    mouse.speed = 17
    mouse.kickback = 50

    # Обновляем характеристики второй мыши
    mouse_2.health = 100
    mouse_2.damage = 15
    mouse_2.speed = 17
    mouse_2.kickback = 50

    # Обновляем координаты золотой монеты
    money_gold.rect.x = 1800
    money_gold.rect.y = 460

    fly.rect.x = 2000
    fly.rect.y = 30

    star_wins.rect.x = 3700
    star_wins.rect.y = 443

    exit_level.rect.x = 3870
    exit_level.rect.y = 450

    # Загружаем спрайты, если их нет

    if not entities.has(yellow_hero):
        player.add(yellow_hero)
        entities.add(player)
    if not entities.has(money_bronze):
        money.add(money_bronze)
        entities.add(money)
    if not entities.has(worm):
        mobs_worm.add(worm)
        entities.add(mobs_worm)
    if not entities.has(worm_pink):
        mobs_worm.add(worm_pink)
        entities.add(mobs_worm)
    if not entities.has(mouse):
        mobs_worm.add(mouse)
        entities.add(mobs_worm)
    if not entities.add(mouse_2):
        mobs_worm.add(mouse_2)
        entities.add(mobs_worm)
    if not entities.has(money_gold):
        money_wins.add(money_gold)
        entities.add(money_wins)

    while launch_of_game:

        crossing = False  # Нет пересечения с изображением

        # Собранные монеты
        text_money = (str(yellow_hero.count_money))
        (x, y, fontsize) = (780, 35, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage = myFont.render(text_money, 0, green)

        health = (str(yellow_hero.health))
        (x2, y2, fontsize) = (745, 98, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage2 = myFont.render(health, 0, green)

        no_bomb = (str(yellow_hero.amount_bomb))
        (x5, y5, fontsize) = (770, 170, 45)
        myFont5 = pygame.font.SysFont("None", fontsize)
        fontImage5 = myFont5.render(no_bomb, 0, green)

        collisions = pygame.sprite.spritecollide(yellow_hero, blocks, False)
        if len(collisions) > 0:
            yellow_hero.onGround = True
            yellow_hero.drop = 0
        else:
            yellow_hero.onGround = False
            yellow_hero.drop = 5
            yellow_hero.rect.y += yellow_hero.drop

        collisions = pygame.sprite.spritecollide(worm, player, False)
        if len(collisions) > 0:
            if audio_On is True and worm_death is False:
                hit_worm.play()

            if yellow_hero.rect.x > worm.rect.x:
                yellow_hero.rect.x += worm.kickback
                yellow_hero.health -= worm.damage
            elif yellow_hero.rect.x <= worm.rect.x:
                yellow_hero.rect.x -= worm.kickback
                yellow_hero.health -= worm.damage

            if yellow_hero.health <= 0:
                dead_player = True

            if worm_death is False:
                yellow_hero.AnimationHit.play()
                yellow_hero.AnimationHit.blit(yellow_hero.image, (0, 0))

        collisions = pygame.sprite.spritecollide(worm_pink, player, False)
        if len(collisions) > 0:
            if audio_On is True and worm_pink_death is False:
                hit_worm.play()

            if yellow_hero.rect.x > worm_pink.rect.x:
                yellow_hero.rect.x += worm_pink.kickback
                yellow_hero.health -= worm_pink.damage
            elif yellow_hero.rect.x <= worm_pink.rect.x:
                yellow_hero.rect.x -= worm_pink.kickback
                yellow_hero.health -= worm_pink.damage

            if yellow_hero.health <= 0:
                dead_player = True

            if worm_pink_death is False:
                yellow_hero.AnimationHit.play()
                yellow_hero.AnimationHit.blit(yellow_hero.image, (0, 0))

        collisions = pygame.sprite.spritecollide(mouse, player, False)
        if len(collisions) > 0:
            if audio_On is True and mouse_death is False:
                hit_worm.play()

            if yellow_hero.rect.x > mouse.rect.x:
                yellow_hero.rect.x += mouse.kickback
                yellow_hero.health -= mouse.damage
            elif yellow_hero.rect.x <= mouse.rect.x:
                yellow_hero.rect.x -= mouse.kickback
                yellow_hero.health -= mouse.damage

            if yellow_hero.health <= 0:
                dead_player = True

            if mouse_death is False:
                yellow_hero.AnimationHit.play()
                yellow_hero.AnimationHit.blit(yellow_hero.image, (0, 0))

        collisions = pygame.sprite.spritecollide(mouse_2, player, False)
        if len(collisions) > 0:
            if audio_On is True and mouse_death_2 is False:
                hit_worm.play()

            if yellow_hero.rect.x > mouse_2.rect.x:
                yellow_hero.rect.x += mouse_2.kickback
                yellow_hero.health -= mouse_2.damage
            elif yellow_hero.rect.x < mouse_2.rect.x:
                yellow_hero.rect.x -= mouse_2.kickback
                yellow_hero.health -= mouse_2.damage

            if yellow_hero.health <= 0:
                dead_player = True

            if mouse_death_2 is False:
                yellow_hero.AnimationHit.play()
                yellow_hero.AnimationHit.blit(yellow_hero.image, (0, 0))

        collisions = pygame.sprite.spritecollide(yellow_hero, money, True)
        if len(collisions) > 0:
            pygame.time.delay(30)
            if audio_On is True:
                handleCoins.play()
            yellow_hero.count_money += 1

        collisions = pygame.sprite.spritecollide(yellow_hero, money_wins, True)
        if len(collisions) > 0:
            pygame.time.delay(20)
            if audio_On is True:
                handleCoins.play()
            yellow_hero.count_money += 3

        collisions = pygame.sprite.spritecollide(worm, inventory, False)
        if len(collisions) > 0 and worm.speed < 0:
            bomb.rect.x -= 10

        collisions = pygame.sprite.spritecollide(worm_pink, inventory, False)
        if len(collisions) > 0 and worm_pink.speed < 0:
            bomb.rect.x -= 10

        collisions = pygame.sprite.spritecollide(yellow_hero, wins, True)
        if len(collisions) > 0:
            pygame.time.delay(20)
            yellow_hero.star += 1
            if audio_On is True:
                wins_music.play()

        collisions = pygame.sprite.spritecollide(bomb, blocks, False)
        if len(collisions) == 0:
            bomb.rect.y += bomb.drop

        collisions = pygame.sprite.spritecollide(yellow_hero, inventory, False)
        if len(collisions) > 0 and bomb.rect.x > yellow_hero.rect.x:
            bomb.rect.x += 10
        if len(collisions) > 0 and bomb.rect.x < yellow_hero.rect.x and bomb.rect.x != 0:
            bomb.rect.x -= 10
        if len(collisions) > 0 and bomb.rect.x == 0 and download_bomb is True:
            yellow_hero.rect.x += 10
            f_left_move = False

        collisions = pygame.sprite.spritecollide(yellow_hero, mobs_fly, False)
        if len(collisions) > 0:
            if audio_On is True:
                hit_worm.play()

            if yellow_hero.rect.x > fly.rect.x:
                yellow_hero.rect.x += fly.kickback

            else:
                yellow_hero.rect.x -= fly.kickback

            yellow_hero.health -= fly.damage

            if yellow_hero.health <= 0:
                dead_player = True
            f_damage_mobs = True

        collisions = pygame.sprite.spritecollide(exit_level, player, True)
        if len(collisions) > 0:
            game_completed = True

        collisions = pygame.sprite.spritecollide(yellow_hero, particles, True)
        if len(collisions) > 0:
            if audio_On is True:
                hit_worm.play()
            yellow_hero.health -= 10
            if yellow_hero.health <= 0:
                dead_player = True

        # Взаимодействие с кнопками
        for x_3 in range(pause_x, pause_x + 30):
            for y_3 in range(pause_y, pause_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing = True

        # Атака летающих мобов
        for fly_x in range(fly.rect.x, fly.rect.x + 200):
            if yellow_hero.rect.x == fly_x:
                entities.add(particles)
                fire.rect.x = fly.rect.x - 10
                fire.rect.y = fly.rect.y + 10
                if yellow_hero.health > 0:
                    particles.add(fire)

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

            # Клавиши нажаты!
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    launch_of_game = False
            if event.type == MOUSEBUTTONDOWN:
                if event.button == 3 and download_bomb == 0:
                    if yellow_hero.amount_bomb <= 0:
                        print("Бомбы закончились!")
                    else:
                        # Координаты расположения бомбы
                        entities.add(inventory)
                        bomb.rect.x = yellow_hero.rect.x
                        bomb.rect.y = yellow_hero.rect.y + 156
                        yellow_hero.amount_bomb -= 1
                        download_bomb += 1

                        if audio_On is True:
                            sound_click.play()

                        confirmation = True
                if event.button == 1 and confirmation is True:
                    download_bomb -= 1
                    entities.remove(bomb)

                    if audio_On is True:
                        explosion.play()
                    confirmation = False

                    for x in range(bomb.rect.x - 230, bomb.rect.x + 230):
                        if x == worm.rect.x:
                            worm.health -= bomb.damage

                            if worm.speed > 0:
                                worm.rect.x -= bomb.kickback
                            else:
                                worm.rect.x += bomb.kickback

                            yellow_hero.count_money += 1
                            time_death = time
                            worm.speed = 0
                            worm.damage = 0
                            worm.kickback = 0
                            worm_death = True
                            """entities.add(drop_money)
                            money_bronze_2.rect.x = worm.rect.x
                            money_bronze_2.rect.y = worm.rect.y"""
                        elif x == worm_pink.rect.x:
                            worm_pink.health -= bomb.damage

                            if worm_pink.speed > 0:
                                worm_pink.rect.x -= bomb.kickback
                            else:
                                worm_pink.rect.x += bomb.kickback

                            yellow_hero.count_money += 1
                            time_death_2 = time
                            worm_pink.speed = 0
                            worm_pink.damage = 0
                            worm_pink.kickback = 0
                            worm_pink_death = True
                            """entities.add(drop_money)
                            money_bronze.rect.x = worm_pink.rect.x
                            money_bronze.rect.y = worm_pink.rect.y"""

                        elif x == mouse.rect.x:
                            mouse.health -= bomb.damage

                            if mouse.speed > 0:
                                mouse.rect.x -= bomb.kickback
                            else:
                                mouse.rect.x += bomb.kickback

                            yellow_hero.count_money += 2
                            time_death_3 = time
                            mouse.speed = 0
                            mouse.damage = 0
                            mouse.kickback = 0
                            mouse_death = True
                            """entities.add(drop_money)
                            money_bronze.rect.x = mouse.rect.x
                            money_bronze.rect.y = mouse.rect.y"""

                        elif x == mouse_2.rect.x:
                            mouse_2.health -= bomb.damage

                            if mouse_2.speed > 0:
                                mouse_2.rect.x -= bomb.kickback
                            else:
                                mouse_2.rect.x += bomb.kickback

                            yellow_hero.count_money += 2
                            time_death_4 = time
                            mouse_2.speed = 0
                            mouse_2.damage = 0
                            mouse_2.kickback = 0
                            mouse_death_2 = True
                            """entities.add(drop_money)
                            money_bronze.rect.x = mouse_2.rect.x
                            money_bronze.rect.y = mouse_2.rect.y"""

                if event.button == 1 and crossing is True:
                    if audio_On is True:
                        sound_click.play()
                    stop_game = True

                # Если прошли уровень и нажали кнопку, то выходим в меню
                if event.button == 1 and game_completed is True:
                    yellow_hero.count_money += 10
                    yellow_hero.level_1_completed = "T"
                    launch_of_game = False
                    menu()

                # Если игрок умер и нажата кнопка, то выходим в меню
                if event.button == 1 and dead_player is True:
                    launch_of_game = False
                    menu()

            if event.type == KEYDOWN:
                if event.key == K_RIGHT:
                    f_right_move = True
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                if event.key == K_LEFT:
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                    f_left_move = True
                if event.key == K_UP and yellow_hero.onGround == True:
                    f_up_move = True
                    yellow_hero.rect.y -= yellow_hero.jump
                    yellow_hero.onGround = False

                    # Клавиши отпущены
            if event.type == KEYUP:
                if event.key == K_RIGHT:
                    f_right_move = False
                if event.key == K_LEFT:
                    f_left_move = False
                if event.key == K_UP:
                    f_up_move = False

        screen.blit(background_color, (0, 0))
        screen.blit(hudCoin_trans, (800, 10))

        if yellow_hero.amount_bomb > 0:
            screen.blit(hudBomb_trans, (800, 140))
        else:
            screen.blit(hudBombNo_trans, (800, 140))

        if yellow_hero.health <= 50 and yellow_hero.health > 0:
            screen.blit(hudHealthHalf_trans, (800, 70))
        elif yellow_hero.health <= 0:
            screen.blit(hudHealthEmpty_trans, (800, 70))
        else:
            screen.blit(hudHealth_trans, (800, 70))

        if yellow_hero.count_money < 10:
            screen.blit(fontImage, (x, y))
        else:
            screen.blit(fontImage, (x - 10, y))
        if yellow_hero.health >= 100:
            screen.blit(fontImage2, (x2, y2))
        else:
            screen.blit(fontImage2, (x2 + 20, y2))
        if yellow_hero.amount_bomb < 10:
            screen.blit(fontImage5, (x5, y5))
        else:
            screen.blit(fontImage5, (x5 - 10, y5))
        if stop_game is False:
            screen.blit(hudPause, (pause_x, pause_y))
        else:
            screen.blit(hudPlay, (pause_x, pause_y))
            pygame.display.update()
        if game_completed is True:

            inscription_wins = ("Congratulations! You wins! Press any key")
            (x6, y6, fontsize6) = (100, 300, 30)
            myFont6 = pygame.font.SysFont("None", fontsize6)
            fontImage6 = myFont6.render(inscription_wins, 0, green)

            screen.blit(fontImage6, (x6, y6))
        if dead_player is True:

            dead_text = ("You were killed! Press any key!")
            (x4, y4, fontsize4) = (100, 300, 60)
            myFont4 = pygame.font.SysFont("None", fontsize4)
            fontImage4 = myFont4.render(dead_text, 0, red)

            screen.blit(fontImage4, (x4, y4))

        clock.tick(40)

        # Рисуем персонажей!
        for event in entities:
            screen.blit(event.image, camera.apply(event))
            camera.update(yellow_hero)

            # Обновляем персонажей
        if stop_game is False:
            if dead_player is False:
                player.update(f_left_move, f_right_move, f_up_move, f_damage_mobs)
                mobs_worm.update()
                mobs_fly.update()
                bomb.update()
                particles.update()
                if time - time_death == 100 and time_death != 0:
                    worm.kill()

                if time - time_death_2 == 100 and time_death_2 != 0:
                    worm_pink.kill()

                if time - time_death_3 == 100 and time_death_3 != 0:
                    mouse.kill()

                if time - time_death_4 == 100 and time_death_4 != 0:
                    mouse_2.kill()

                if main_music.playing is False and music_On is True and audio_On is True:
                    main_music.play()

            pygame.display.update()
            time += 1
        else:
            main_music.pause()
            pause()

    pygame.quit()
    sys.exit()


def rungame_level_2(f_left_move, f_right_move, f_up_move, f_damage_mobs, f_go_attack, f_collide_ground, f_return_in_usual):
    level_2 = True  # уровень запущен
    global game_completed_2
    game_completed = False # Уровень не пройден
    dead_player = False  # Игрок не умер
    stop_game = False  # Игра не остановлена
    download_bomb = 0  # Нет установленных бомб
    confirmation = False  # Бомба не установлена
    time = 0  # Время игры
    bee_in_game = False  # Пчела не прилетела
    key = False  # Ключ не подобран (Я не уверен, что именно для этого)
    redstone = False  # Камень не появился
    time_death = 0  # Время убийства пчелы
    bee_death = False  # Пчела не убита
    box_use = False  # Не взламываем ящик
    beige_player_in_game = False  # Бежевый персонаж не в игре
    time_appear = 0  # Время появление бежевого персонажа

    # Обновляем характеристики персонажа и пчелы
    yellow_hero.health = 100  # Обновляем значение здоровья
    yellow_hero.rect.x = 20  # Обновляем координаты х
    yellow_hero.rect.y = 314  # Обновляем координату y

    bee.health = 255
    bee.rect.x = 800
    bee.rect.y = 50
    bee.speed = 10
    bee.damage = 10
    bee.kickback = 50
    bee.drop = 5

    beige_player.rect.x = 700
    beige_player.rect.y = 314

    gemRed.rect.y = -200
    gemRed.drop = 10

    # Загружаем спрайты, если их нет
    if not entities_level_2.has(yellow_hero):
        player.add(yellow_hero)
        entities_level_2.add(player)
    if not entities_level_2.has(yellow_box):
        box.add(yellow_box)
        entities_level_2.add(box)
    if not entities_level_2.has(gemRed):
        bonus.add(gemRed)
        entities_level_2.add(bonus)
    if entities_level_2.has(beige_player):
        entities_level_2.remove(AI_player)
    if entities_level_2.has(bee):
        entities_level_2.remove(bee)

    while level_2 is True:

        crossing = False  # Нет пересечения с кнопкой паузы
        box_crossing = False  # Персонаж не у ящика
        press_button = False  # Кнопку нельзя нажимать

        text_money = (str(yellow_hero.count_money))
        (x, y, fontsize) = (780, 35, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage = myFont.render(text_money, 0, green)

        health = (str(yellow_hero.health))
        (x2, y2, fontsize) = (745, 98, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage2 = myFont.render(health, 0, green)

        no_bomb = (str(yellow_hero.amount_bomb))
        (x5, y5, fontsize) = (770, 170, 45)
        myFont5 = pygame.font.SysFont("None", fontsize)
        fontImage5 = myFont5.render(no_bomb, 0, green)

        collisions = pygame.sprite.spritecollide(yellow_hero, blocks, False)
        if len(collisions) > 0:
            yellow_hero.onGround = True
            yellow_hero.drop = 0
        else:
            yellow_hero.onGround = False
            yellow_hero.drop = 5
            yellow_hero.rect.y += yellow_hero.drop

        collisions = pygame.sprite.spritecollide(bomb, blocks, False)
        if len(collisions) == 0:
            bomb.rect.y += bomb.drop

        collisions = pygame.sprite.spritecollide(yellow_hero, inventory, False)
        if len(collisions) > 0 and bomb.rect.x > yellow_hero.rect.x:
            bomb.rect.x += 10
        if len(collisions) > 0 and bomb.rect.x < yellow_hero.rect.x and bomb.rect.x != 0:
            bomb.rect.x -= 10
        if len(collisions) > 0 and bomb.rect.x == 0 and download_bomb is True:
            f_left_move = False

        collisions = pygame.sprite.spritecollide(yellow_hero, box, False)
        if len(collisions) > 0 and yellow_hero.rect.x < yellow_box.rect.x:
            f_right_move = False
            yellow_hero.rect.x -= 10
            box_crossing = True
            press_button = True
            if box_use is True:
                box_open.play()
                entities_level_2.add(AI_player)
                beige_player.rect.x = yellow_box.rect.x
                beige_player.rect.y = yellow_box.rect.y - 129
                beige_player_in_game = True
                time_appear = time
                yellow_box.kill()

        if len(collisions) > 0 and yellow_hero.rect.x > yellow_box.rect.x:
            f_left_move = False
            yellow_hero.rect.x += 10
            box_crossing = True
            press_button = True
            if box_use is True:
                box_open.play()
                entities_level_2.add(AI_player)
                beige_player.rect.x = yellow_box.rect.x
                beige_player.rect.y = yellow_box.rect.y - 129
                beige_player_in_game = True
                time_appear = time
                yellow_box.kill()

        collisions = pygame.sprite.spritecollide(yellow_hero, mobs_fly_level_2, False)
        if len(collisions) > 0 and bee_in_game is True and bee_death is False:
            if audio_On is True and dead_player is False:
                hit_worm.play()

            if dead_player is False:
                yellow_hero.health -= bee.damage
            if yellow_hero.rect.x > bee.rect.x:
                if yellow_hero.rect.x < 870:
                    yellow_hero.rect.x += bee.kickback
                else:
                    bee.kickback = 0
            else:
                if yellow_hero.rect.x > 100:
                    yellow_hero.rect.x -= bee.kickback
                else:
                    bee.kickback = 0

            if yellow_hero.health <= 0:
                dead_player = True

        collisions = pygame.sprite.spritecollide(bee, blocks, False)
        if len(collisions) > 0:
            f_collide_ground = True
            bee.drop = 0
        else:
            f_collide_ground = False

        collisions = pygame.sprite.spritecollide(gemRed, blocks, False)
        if len(collisions) > 0:
            gemRed.drop = 0

        collisions = pygame.sprite.spritecollide(yellow_hero, bonus, True)
        if len(collisions) > 0:
            if audio_On is True:
                wins_music.play()
            yellow_hero.health += 400

        collisions = pygame.sprite.spritecollide(bee, box, False)
        if len(collisions) > 0:
            if bee.rect.x > yellow_box.rect.x:
                bee.rect.y += bee.speed
            else:
                bee.rect.y -= bee.speed

        if bee_death is True:
            collisions = pygame.sprite.spritecollide(yellow_hero, keys, True)
            if len(collisions) > 0:
                if audio_On is True:
                    wins_music.play()
                key = True

        # Взаимодействие с кнопками
        for x_3 in range(pause_x, pause_x + 30):
            for y_3 in range(pause_y, pause_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing = True

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

            if event.type == MOUSEBUTTONDOWN and event.button == 1 and crossing is True:
                stop_game = True

            if event.type == MOUSEBUTTONDOWN:
                if event.button == 3 and download_bomb == 0:
                    if yellow_hero.amount_bomb <= 0:
                        print("Бомбы закончились!")
                    else:
                        # Координаты расположения бомбы
                        entities_level_2.add(inventory)
                        bomb.rect.x = yellow_hero.rect.x
                        bomb.rect.y = yellow_hero.rect.y + 156
                        yellow_hero.amount_bomb -= 1
                        download_bomb += 1

                        if audio_On is True:
                            sound_click.play()

                        confirmation = True
                if event.button == 1 and confirmation is True:
                    download_bomb -= 1
                    entities_level_2.remove(bomb)

                    if audio_On is True:
                        explosion.play()
                    confirmation = False

                    for x in range(bomb.rect.x - 230, bomb.rect.x + 230):
                        for y in range(bomb.rect.y - 130, bomb.rect.y + 130):
                            if x == bee.rect.x and y == bee.rect.y:
                                bee.health -= bomb.damage
                                if bee.health <= 0:
                                    yellow_hero.count_money += 10

                                    if bee.speed <= 0:
                                        bee.rect.x -= bomb.kickback
                                    else:
                                        bee.rect.x += bomb.kickback

                                    time_death = time
                                    bee.speed = 0
                                    bee.damage = 0
                                    bee.kickback = 0
                                    bee_death = True
                                    bee_in_game = False
                                    entities_level_2.add(keys)
                                    yellow_key.rect.x = bee.rect.x
                                    yellow_key.rect.y = bee.rect.y

                if event.button == 1 and game_completed is True:
                    yellow_hero.count_money += 10
                    yellow_hero.level_2_completed = "T"
                    menu()

                if event.button == 1 and dead_player is True:
                    menu()

            if event.type == KEYDOWN:
                if event.key == K_RIGHT:
                    f_right_move = True
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()

                if event.key == K_LEFT:
                    f_left_move = True
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()

                if event.key == K_UP and yellow_hero.onGround is True:
                    f_up_move = True
                    yellow_hero.rect.y -= yellow_hero.jump
                    yellow_hero.onGround = False

                if key is True and event.key == K_f and box_crossing is True:
                    box_use = True # Разрешаем вскрыть ящик
                    key = False # Теряем ключ (для отображения)

            if event.type == KEYUP:
                if event.key == K_RIGHT:
                    f_right_move = False

                if event.key == K_LEFT:
                    f_left_move = False

                if event.key == K_UP:
                    f_up_move = False

        clock.tick(40)

        screen.blit(background_color, (0, 0))
        screen.blit(hudCoin_trans, (800, 10))

        if yellow_hero.amount_bomb > 0:
            screen.blit(hudBomb_trans, (800, 140))
        else:
            screen.blit(hudBombNo_trans, (800, 140))

        if yellow_hero.health <= 50 and yellow_hero.health > 0:
            screen.blit(hudHealthHalf_trans, (800, 70))
        elif yellow_hero.health <= 0:
            screen.blit(hudHealthEmpty_trans, (800, 70))
        else:
            screen.blit(hudHealth_trans, (800, 70))

        if key is False:
            screen.blit(hudYellowKeyEmpty, (770, 200))
        else:
            screen.blit(hudYellowKey, (770, 200))

        if yellow_hero.count_money < 10:
            screen.blit(fontImage, (x, y))
        else:
            screen.blit(fontImage, (x - 10, y))

        if yellow_hero.health >= 100:
            screen.blit(fontImage2, (x2, y2))
        else:
            screen.blit(fontImage2, (x2 + 20, y2))

        if yellow_hero.amount_bomb < 10:
            screen.blit(fontImage5, (x5, y5))
        else:
            screen.blit(fontImage5, (x5 - 10, y5))

        if stop_game is False:
            screen.blit(hudPause, (pause_x, pause_y))
        else:
            screen.blit(hudPlay, (pause_x, pause_y))

        if press_button is True:

            press_f = ("Press F")
            (x3, y3, fontsize) = (400, 200, 45)
            myFont3 = pygame.font.SysFont("None", fontsize)
            fontImage3 = myFont3.render(press_f, 0, blue)

            screen.blit(fontImage3, (x3, y3))

        if dead_player is True:

            dead_text = ("You were killed! Press left click")
            (x4, y4, fontsize4) = (100, 300, 60)
            myFont4 = pygame.font.SysFont("None", fontsize4)
            fontImage4 = myFont4.render(dead_text, 0, red)

            screen.blit(fontImage4, (x4, y4))

        if game_completed is True:

            inscription_wins = ("Congratulations! You wins! Press left click")
            (x6, y6, fontsize6) = (100, 300, 30)
            myFont6 = pygame.font.SysFont("None", fontsize6)
            fontImage6 = myFont6.render(inscription_wins, 0, green)

            screen.blit(fontImage6, (x6, y6))

        if time > 500 and bee_death is False:
            bee_in_game = True
            # Если пчела была убита в прошлом матче
            if not entities_level_2.has(bee):
                mobs_fly_level_2.add(bee)
                entities_level_2.add(mobs_fly_level_2)
            # Если только проходим уровень
            if mobs_fly_level_2.has(bee):
                entities_level_2.add(mobs_fly_level_2)

        # Воспроизведение жжужания пчелы
        if bee_death is False and bee_in_game is True and dead_player is False:
            if audio_On is True:
                fon_music.play()
                # НЕ ПРОВЕРЕННО, МОЖЕТ, И НЕ РАБОТАЕТ
                if fon_music.playing is False:
                    fon_music.next()
        else:
            fon_music.pause()

        # Падение красного камня
        if time > 200:
            entities_level_2.add(bonus)
            redstone = True

        # Пчела аттакует
        if time > 1000 and time < 1100 or time > 1500 and time < 1700 or time > 2000:
            if dead_player is False:
                f_go_attack = True
                bee.attack(f_go_attack, f_collide_ground, f_return_in_usual)
        elif time > 1100 and time < 1170 or time > 1700 and time < 1770 and dead_player is False:
            if dead_player is False:
                if bee.rect.y >= 50:
                    f_return_in_usual = True
                else:
                    f_return_in_usual = False
                f_go_attack = False
                bee.attack(f_go_attack, f_collide_ground, f_return_in_usual)

        # Победа в игре
        if beige_player.rect.x >= 950:
            game_completed = True

        for event in entities_level_2:
            screen.blit(event.image, camera_2.apply(event))
            camera_2.update(yellow_hero)

        if stop_game is False:
            if dead_player is False and game_completed is False:
                player.update(f_left_move, f_right_move, f_up_move, f_damage_mobs)
                if beige_player_in_game is True and time - time_appear > 200 and time_appear != 0:
                    AI_player.update()
                bomb.update()
                if bee_in_game is True:
                    mobs_fly_level_2.update(f_go_attack)
                if redstone is True:
                    bonus.update()

                if time - time_death == 100 and time_death != 0:
                    bee.kill()

                if main_music.playing is False and music_On is True and audio_On is True:
                    main_music.play()

            pygame.display.update()
            time += 1
        else:
            fon_music.pause()
            main_music.pause()
            pause()


def rungame_level_3(f_left_move, f_right_move, f_up_move, f_damage_mobs):
    level_3 = True
    confirmation = False  # Бомба не установлена!
    stop_game = False  # Игра не остановлена
    download_bomb = 0  # Количество установленных бомб!
    global player_in_water
    player_in_water = False  # Игрок не в воде
    player_stop = False  # Игрок не вываливается за пределы карты (по y)
    crossing_water = False  # Не попал в воду
    crossing_box = False # Не пересекается с коробкой информации
    dead_player = False  # Игрок не умер
    fish_1_death = 0  # Рыба не сдохла
    fish_2_death = 0  # Рыба 2 не сдохла
    fish_3_death = 0  # Рыба 3 не сдохла
    fish_4_death = 0  # Рыба 4 не сдохла
    green_fish_1_death = 0  # Зеленая рыба не сдохла
    bomb_on_ground = False  # Бомба не на земле
    star_has = False # Звезду не подобрали
    game_completed = False # Уровень не прошли
    global box_used
    box_used = False # Ящик не использован
    info_time = 0 # Ящик не использован (для времени)
    time = 0  # Время игры

    # Обновляем данные
    yellow_hero.rect.x = 0
    yellow_hero.rect.y = 100
    yellow_hero.health = 100

    fish_1.health = 100
    fish_1.speed = 12
    fish_1.damage = 30
    fish_1.kickback = 30

    fish_2.health = 100
    fish_2.speed = 10
    fish_2.damage = 30
    fish_2.kickback = 30

    fish_3.health = 100
    fish_3.speed = 14
    fish_3.damage = 30
    fish_3.kickback = 30

    fish_4.health = 100
    fish_4.speed = 13
    fish_4.damage = 30
    fish_4.kickback = 30

    green_fish_1.health = 100
    green_fish_1.speed = 10
    green_fish_1.damage = 20
    green_fish_1.kickback = 30

    fish_2.rect.x = 500
    fish_2.rect.y = 320

    fish_3.rect.x = 1000
    fish_3.rect.y = 350

    fish_4.rect.x = 1350
    fish_4.rect.y = 370

    green_fish_1.rect.x = 2500
    green_fish_1.rect.y = 380

    block_ground_2_up.rect.x = 2250
    block_ground_2_up.rect.y = 150

    block_ground_2_end.rect.x = 2873
    block_ground_2_end.rect.y = 350

    rock.rect.x = 2280
    rock.rect.y = 25
    rock.drop = 0

    star_wins.rect.x = 2500
    star_wins.rect.y = 300

    exit_level.rect.x = 2880
    exit_level.rect.y = 230

    money_gold.rect.x = 1850
    money_gold.rect.y = 240

    if not entities_level_3.has(yellow_hero):
        player.add(yellow_hero)
        entities_level_3.add(player)

    if not entities_level_3.has(fish_1):
        swim_mobs.add(fish_1)
        entities_level_3.add(swim_mobs)

    if not entities_level_3.has(fish_2):
        swim_mobs.add(fish_2)
        entities_level_3.add(swim_mobs)

    if not entities_level_3.has(fish_3):
        swim_mobs.add(fish_3)
        entities_level_3.add(swim_mobs)

    if not entities_level_3.has(fish_4):
        swim_mobs.add(fish_4)
        entities_level_3.add(swim_mobs)

    if not entities_level_3.has(green_fish_1):
        swim_mobs.add(green_fish_1)
        entities_level_3.add(swim_mobs)

    if not entities_level_3.has(star_wins):
        wins.add(star_wins)
        entities_level_3.add(wins)

    if not entities_level_3.has(money_gold):
        money_wins.add(money_gold)
        entities_level_3.add(money_wins)

    while level_3:

        crossing = False  # Нет пересечения с изображением

        # Собранные монеты
        text_money = (str(yellow_hero.count_money))
        (x, y, fontsize) = (780, 35, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage = myFont.render(text_money, 0, green)

        health = (str(yellow_hero.health))
        (x2, y2, fontsize) = (745, 98, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage2 = myFont.render(health, 0, green)

        no_bomb = (str(yellow_hero.amount_bomb))
        (x5, y5, fontsize) = (770, 170, 45)
        myFont5 = pygame.font.SysFont("None", fontsize)
        fontImage5 = myFont5.render(no_bomb, 0, green)

        collisions = pygame.sprite.spritecollide(yellow_hero, water_blocks, False)
        if len(collisions) > 0:
            # Отыгрываем анимацию и уменьшаем скорость
            yellow_hero.AnimationSwim.blit(yellow_hero.image, (0, 0))
            yellow_hero.AnimationSwim.play()
            yellow_hero.speed = 5
            player_in_water = True
            if audio_On is True:
                sound_jump.play()
                if sound_jump.playing is False:
                    sound_jump.play()
        else:
            player_in_water = False
            yellow_hero.speed = 10
            sound_jump.pause()

        collisions = pygame.sprite.spritecollide(yellow_hero, blocks_2, False)
        if len(collisions) > 0:
            yellow_hero.onGround = True
            yellow_hero.drop = 0
        else:
            if player_in_water is False:
                yellow_hero.onGround = False
            else:
                yellow_hero.onGround = True

            if player_in_water is False and player_stop is False:
                yellow_hero.drop = 5
                yellow_hero.speed = 10
            elif player_in_water is True and player_stop is True:
                yellow_hero.drop = 0
                yellow_hero.speed = 5
            elif crossing_box is True:
                yellow_hero.drop = 0
                yellow_hero.speed = 10
            else:
                yellow_hero.drop = 2
                yellow_hero.speed = 5

            yellow_hero.rect.y += yellow_hero.drop

        collisions = pygame.sprite.spritecollide(bomb, blocks_2, False)
        if len(collisions) == 0:
            if crossing_water is False:
                bomb_on_ground = False # Не на земле и не в воде
                bomb.drop = 10
                bomb.rect.y += bomb.drop
        else:
            bomb_on_ground = True
            bomb.drop = 0

        collisions = pygame.sprite.spritecollide(bomb, water_blocks, False)
        if len(collisions) == 0:
            bomb.drop = 10
            bomb.rect.y += bomb.drop
            crossing_water = False
        else:
            crossing_water = True
            bomb.drop = 0

        collisions = pygame.sprite.spritecollide(fish_1, player, False)
        if len(collisions) > 0:
            if audio_On is True and fish_1_death == 0:
                hit_worm.play()

            if yellow_hero.rect.x >= fish_1.rect.x:
                yellow_hero.rect.x += fish_1.kickback
            else:
                yellow_hero.rect.x -= fish_1.kickback

            yellow_hero.health -= fish_1.damage

            if yellow_hero.health <= 0:
                dead_player = True

        collisions = pygame.sprite.spritecollide(fish_2, player, False)
        if len(collisions) > 0:
            if audio_On is True and fish_2_death == 0:
                hit_worm.play()

            if yellow_hero.rect.x >= fish_2.rect.x:
                yellow_hero.rect.x += fish_2.kickback
            else:
                yellow_hero.rect.x -= fish_2.kickback

            yellow_hero.health -= fish_2.damage

            if yellow_hero.health <= 0:
                dead_player = True

        collisions = pygame.sprite.spritecollide(fish_3, player, False)
        if len(collisions) > 0:
            if audio_On is True and fish_3_death == 0:
                hit_worm.play()

            if yellow_hero.rect.x >= fish_3.rect.x:
                yellow_hero.rect.x += fish_3.kickback
            else:
                yellow_hero.rect.x -= fish_3.kickback

            yellow_hero.health -= fish_3.damage

            if yellow_hero.health <= 0:
                dead_player = True

        collisions = pygame.sprite.spritecollide(fish_4, player, False)
        if len(collisions) > 0:
            if audio_On is True and fish_4_death == 0:
                hit_worm.play()

            if yellow_hero.rect.x >= fish_4.rect.x:
                yellow_hero.rect.x += fish_4.kickback
            else:
                yellow_hero.rect.x -= fish_4.kickback

            yellow_hero.health -= fish_4.damage

            if yellow_hero.health <= 0:
                dead_player = True

        collisions = pygame.sprite.spritecollide(green_fish_1, player, False)
        if len(collisions) > 0:
            if audio_On is True and green_fish_1_death == 0:
                hit_worm.play()

            if yellow_hero.rect.x >= green_fish_1.rect.x:
                yellow_hero.rect.x += green_fish_1.kickback
            else:
                yellow_hero.rect.x -= green_fish_1.kickback

            yellow_hero.health -= green_fish_1.damage

            if yellow_hero.health <= 0:
                dead_player = True

        collisions = pygame.sprite.spritecollide(bomb, swim_mobs, False)
        if len(collisions) > 0:
            if bomb.rect.y > fish_1.rect.y:
                bomb.rect.y -= fish_1.kickback
            else:
                bomb.rect.y += fish_1.kickback

        """collisions = pygame.sprite.spritecollide(bomb, water_blocks, False)
        if len(collisions) > 0:
            bomb.rect.y += 20 # Бомба всплывает на поверхность"""

        collisions = pygame.sprite.spritecollide(rock, blocks_2, False)
        if len(collisions) == 0:
            rock.drop = 10
        else:
            rock.drop = 0

        if rock.rect.y < green_fish_1.rect.y:
            collisions = pygame.sprite.spritecollide(green_fish_1, stone_group, False)
            if len(collisions) > 0:
                if audio_On is True:
                    rock_hits.play()
                green_fish_1.health = 0
                green_fish_1.speed = 0
                green_fish_1.damage = 0
                green_fish_1.kickback = 0
                green_fish_1_death = time
        else:
            collisions = pygame.sprite.spritecollide(green_fish_1, stone_group, False)
            if len(collisions) > 0:
                if rock.rect.x > green_fish_1.rect.x:
                    rock.rect.x += green_fish_1.kickback
                else:
                    rock.rect.x -= green_fish_1.kickback

        collisions = pygame.sprite.spritecollide(yellow_hero, stone_group, False)
        if len(collisions) > 0:
            if yellow_hero.rect.x < rock.rect.x:
                rock.rect.x += 10  # Персонаж толкает камень
            else:
                rock.rect.x -= 10

        collisions = pygame.sprite.spritecollide(yellow_hero, wins, True)
        if len(collisions) > 0:
            if audio_On is True:
                wins_music.play()
            star_has = True
            yellow_hero.star += 1

        if star_has is True:
            collisions = pygame.sprite.spritecollide(exit_level, player, True)
            if len(collisions) > 0:
                game_completed = True

        collisions = pygame.sprite.spritecollide(yellow_hero, money_2, True)
        if len(collisions) > 0:
            if audio_On is True:
                handleCoins.play()
            yellow_hero.count_money += 1

        collisions = pygame.sprite.spritecollide(yellow_hero, money_wins, True)
        if len(collisions) > 0:
            if audio_On is True:
                handleCoins.play()
            yellow_hero.count_money += 3

        collisions = pygame.sprite.spritecollide(yellow_hero, game_box, False)
        if len(collisions) > 0:
            box_used = True
            info_time = time
            crossing_box = True
        else:
            crossing_box = False

        for x_3 in range(pause_x, pause_x + 30):
            for y_3 in range(pause_y, pause_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing = True

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
            if event.type == MOUSEBUTTONDOWN:
                if event.button == 3 and download_bomb == 0:
                    if yellow_hero.amount_bomb <= 0:
                        print("Бомбы закончились!")
                    else:
                        # Координаты расположения бомбы
                        entities_level_3.add(inventory)
                        bomb.rect.x = yellow_hero.rect.x
                        bomb.rect.y = yellow_hero.rect.y + 156
                        yellow_hero.amount_bomb -= 1
                        download_bomb += 1

                        if audio_On is True:
                            sound_click.play()

                        confirmation = True
                if event.button == 1 and confirmation is True:
                    download_bomb -= 1
                    entities_level_3.remove(bomb)

                    if audio_On is True:
                        explosion.play()
                    confirmation = False

                    for x in range(bomb.rect.x - 230, bomb.rect.x + 230):
                        if bomb_on_ground is False:
                            for y in range(bomb.rect.y - 130, bomb.rect.y + 130):
                                if x == fish_1.rect.x and y == fish_1.rect.y:
                                    fish_1.health -= bomb.damage
                                    if fish_1.health <= 0:
                                        fish_1.speed = 0
                                        fish_1.damage = 0
                                        fish_1.kickback = 0
                                        fish_1_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_1, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_1.rect.y += fish_1.drop
                                        else:
                                            fish_1.drop = 0

                                if x == fish_2.rect.x and y == fish_2.rect.y:
                                    fish_2.health -= bomb.damage
                                    if fish_2.health <= 0:
                                        fish_2.speed = 0
                                        fish_2.damage = 0
                                        fish_2.kickback = 0
                                        fish_2_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_2, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_2.rect.y += fish_2.drop
                                        else:
                                            fish_2.drop = 0

                                if x == fish_3.rect.x and y == fish_3.rect.y:
                                    fish_3.health -= bomb.damage
                                    if fish_3.health <= 0:
                                        fish_3.speed = 0
                                        fish_3.damage = 0
                                        fish_3.kickback = 0
                                        fish_3_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_3, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_3.rect.y += fish_3.drop
                                        else:
                                            fish_3.drop = 0

                                if x == fish_4.rect.x and y == fish_4.rect.y:
                                    fish_4.health -= bomb.damage
                                    if fish_4.health <= 0:
                                        fish_4.speed = 0
                                        fish_4.damage = 0
                                        fish_4.kickback = 0
                                        fish_4_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_4, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_4.rect.y += fish_4.drop
                                        else:
                                            fish_4.drop = 0

                        else:
                            for y in range(bomb.rect.y - 130, bomb.rect.y):
                                if x == fish_1.rect.x and y == fish_1.rect.y:
                                    fish_1.health -= bomb.damage
                                    if fish_1.health <= 0:
                                        fish_1.speed = 0
                                        fish_1.damage = 0
                                        fish_1.kickback = 0
                                        fish_1_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_1, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_1.rect.y += fish_1.drop
                                        else:
                                            fish_1.drop = 0

                                if x == fish_2.rect.x and y == fish_2.rect.y:
                                    fish_2.health -= bomb.damage
                                    if fish_2.health <= 0:
                                        fish_2.speed = 0
                                        fish_2.damage = 0
                                        fish_2.kickback = 0
                                        fish_2_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_2, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_2.rect.y += fish_2.drop
                                        else:
                                            fish_2.drop = 0

                                if x == fish_3.rect.x and y == fish_3.rect.y:
                                    fish_3.health -= bomb.damage
                                    if fish_3.health <= 0:
                                        fish_3.speed = 0
                                        fish_3.damage = 0
                                        fish_3.kickback = 0
                                        fish_3_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_3, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_3.rect.y += fish_3.drop
                                        else:
                                            fish_3.drop = 0

                                if x == fish_4.rect.x and y == fish_4.rect.y:
                                    fish_4.health -= bomb.damage
                                    if fish_4.health <= 0:
                                        fish_4.speed = 0
                                        fish_4.damage = 0
                                        fish_4.kickback = 0
                                        fish_4_death = time
                                        yellow_hero.count_money += 3

                                        collisions = pygame.sprite.spritecollide(fish_4, water_blocks, False)
                                        if len(collisions) == 0:
                                            fish_4.rect.y += fish_4.drop
                                        else:
                                            fish_4.drop = 0

                if event.button == 1 and crossing is True:
                    if audio_On is True:
                        switch_1.play()
                    stop_game = True

                if event.button == 1 and dead_player is True:
                    if audio_On is True:
                        fon_music.pause()
                        fon_music_2.pause()
                        sound_jump.pause()
                    menu()

                if event.button == 1 and game_completed is True:
                    yellow_hero.count_money += 15
                    yellow_hero.level_3_completed = "T"
                    if audio_On is True:
                        fon_music.pause()
                        fon_music_2.pause()
                        sound_jump.pause()
                    menu()

            if event.type == KEYDOWN:
                if event.key == K_RIGHT and yellow_hero.rect.x < 2800:
                    f_right_move = True
                if event.key == K_LEFT:
                    f_left_move = True
                if event.key == K_UP and yellow_hero.onGround is True and yellow_hero.health > 0:
                    f_up_move = True
                    yellow_hero.rect.y -= yellow_hero.jump
                    yellow_hero.onGround = False

                    # Клавиши отпущены
            if event.type == KEYUP:
                if event.key == K_RIGHT:
                    f_right_move = False
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                if event.key == K_LEFT:
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                    f_left_move = False
                if event.key == K_UP:
                    f_up_move = False

        # Чтобы игрок не вываливался за пределы карты.
        if yellow_hero.rect.y >= 380:
            player_stop = True  # игрок вываливается за пределы карты
        else:
            player_stop = False  # игрок не вываливается

        # Если рыбу убили, она падает, пока не коснется границы экрана
        if green_fish_1_death > 0:
            green_fish_1.rect.y += green_fish_1.drop
            if green_fish_1.rect.y >= 450:
                green_fish_1.drop = 0

        # Камень падает, пока не каснется границы экрана
        if rock.rect.y >= 500:
            if green_fish_1_death == 0:
                rock.rect.x = 2280
                rock.rect.y = -100 # Камень телепортируется и падает с неба.
            else:
                rock.drop = 0

        clock.tick(40)

        screen.blit(background_color_2, (0, 0))
        screen.blit(hudCoin_trans, (800, 10))

        if yellow_hero.amount_bomb > 0:
            screen.blit(hudBomb_trans, (800, 140))
        else:
            screen.blit(hudBombNo_trans, (800, 140))

        if yellow_hero.health <= 50 and yellow_hero.health > 0:
            screen.blit(hudHealthHalf_trans, (800, 70))
        elif yellow_hero.health <= 0:
            screen.blit(hudHealthEmpty_trans, (800, 70))
        else:
            screen.blit(hudHealth_trans, (800, 70))

        if yellow_hero.count_money < 10:
            screen.blit(fontImage, (x, y))
        else:
            screen.blit(fontImage, (x - 10, y))
        if yellow_hero.health >= 100:
            screen.blit(fontImage2, (x2, y2))
        else:
            screen.blit(fontImage2, (x2 + 20, y2))
        if yellow_hero.amount_bomb < 10:
            screen.blit(fontImage5, (x5, y5))
        else:
            screen.blit(fontImage5, (x5 - 10, y5))
        if stop_game is False:
            screen.blit(hudPause, (pause_x, pause_y))
        else:
            screen.blit(hudPlay, (pause_x, pause_y))
            pygame.display.update()

        if dead_player is True:

            dead_text = ("You were killed! Press left click")
            (x4, y4, fontsize4) = (100, 300, 60)
            myFont4 = pygame.font.SysFont("None", fontsize4)
            fontImage4 = myFont4.render(dead_text, 0, red)

            screen.blit(fontImage4, (x4, y4))

        if game_completed is True:

            inscription_wins = ("Congratulations! You wins! Press left click")
            (x6, y6, fontsize6) = (100, 300, 30)
            myFont6 = pygame.font.SysFont("None", fontsize6)
            fontImage6 = myFont6.render(inscription_wins, 0, green)

            screen.blit(fontImage6, (x6, y6))

        if box_used is True and time - info_time < 150 and info_time != 0:

            info_1 = ("Hit the rock!")
            (x7, y7, fontsize7) = (300, 100, 35)
            myFont7 = pygame.font.SysFont("None", fontsize7)
            fontImage7 = myFont7.render(info_1, 0, green)

            screen.blit(fontImage7, (x7, y7))

        for event in entities_level_3:
            screen.blit(event.image, camera_3.apply(event))
            camera_3.update(yellow_hero)

        if stop_game is False:
            if dead_player is False:
                player.update(f_left_move, f_right_move, f_up_move, f_damage_mobs)
                swim_mobs.update()
                stone_group.update()
                game_box.update()
                if audio_On is True:
                    fon_music_2.play()

            if time - fish_1_death > 100 and fish_1_death != 0:
                fish_1.kill()

            if time - fish_2_death > 100 and fish_2_death != 0:
                fish_2.kill()

            if time - fish_3_death > 100 and fish_3_death != 0:
                fish_3.kill()

            if time - fish_4_death > 100 and fish_4_death != 0:
                fish_4.kill()

            if time - green_fish_1_death > 100 and green_fish_1_death != 0:
                green_fish_1.kill()

            pygame.display.update()
            time += 1
        else:
            fon_music_2.pause()
            pause()


def rungame_level_4(f_left_move, f_right_move, f_up_move, f_damage_mobs):
    level_4 = True  # Игра запущена!
    confirmation = False  # Бомба не установлена!
    stop_game = False  # Игра не остановлена
    download_bomb = 0  # Количество установленных бомб!
    dead_player = False  # Игрок не умер
    game_completed = False  # Уровень не пройден
    global crossing_sprung
    crossing_sprung = False  # Нет пересечения с пружиной
    crossing_lava = False  # Нет пересечения с блоком лавы
    press_f = False  # Клавиша "F" не нажата
    dialog = 0  # Для отображения текста
    inter_dialog = False  # Игрок не вступил в диалог
    global rock_dead
    rock_dead = False  # Камень не уничтожен
    end_dialog = 0  # Игрок выполнил задание и читает последнюю фразу
    sprung_in_game = False  # Игрок ещё не приобрел пружину
    saw_death = 0  # Saw не убит
    fly_death = 0  # Fly не убит
    task_1 = False  # Первое задание не выполнено
    task_2 = False  # Второе задание не выполнено
    # ladder_crossing = False  # Нет пересечения с лестницой
    time = 0  # Время игры

    # Обновляем данные
    yellow_hero.health = 100
    yellow_hero.rect.x = 20
    yellow_hero.rect.y = 314

    lava_1.damage = 30
    lava_2.damage = 30

    rock.rect.x = 800
    rock.rect.y = 450

    spikes_1.rect.x = 790
    spikes_1.rect.y = 270
    spikes_1.damage = 100

    star_wins.rect.x = 700
    star_wins.rect.y = 40

    fly.speed = 12
    fly.kickback = 50
    fly.health = 100
    fly.damage = 20
    fly.drop = 0

    door_top_2.rect.x = 3250
    door_mid_2.rect.x = 3250

    saw_1.rect.x = 350
    saw_1.rect.y = 400
    saw_1.health = 100

    exit_level.rect.x = 4000
    exit_level.rect.y = 450

    # Добавляем спрайты, если их нет
    if not entities_level_4.has(yellow_hero):
        player.add(yellow_hero)
        entities_level_4.add(player)

    if not entities_level_4.has(rock):
        stone_group.add(rock)
        entities_level_4.add(stone_group)

    if not entities_level_4.has(fly):
        mobs_fly.add(fly)
        entities_level_4.add(mobs_fly)

    if not entities_level_4.has(saw_1):
        neutral_mobs.add(saw_1)
        entities_level_4.add(neutral_mobs)

    if entities_level_4.has(jump_1):
        entities_level_4.remove(sprung)

    while level_4:

        crossing = False  # Нет пересечения с изображением

        # Собранные монеты
        text_money = (str(yellow_hero.count_money))
        (x, y, fontsize) = (780, 35, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage = myFont.render(text_money, 0, green)

        health = (str(yellow_hero.health))
        (x2, y2, fontsize) = (745, 98, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage2 = myFont.render(health, 0, green)

        no_bomb = (str(yellow_hero.amount_bomb))
        (x5, y5, fontsize) = (770, 170, 45)
        myFont5 = pygame.font.SysFont("None", fontsize)
        fontImage5 = myFont5.render(no_bomb, 0, green)

        collisions = pygame.sprite.spritecollide(yellow_hero, blocks_3, False)
        if len(collisions) > 0:
            yellow_hero.onGround = True
            yellow_hero.drop = 0
        else:
            if crossing_lava is False:
                yellow_hero.onGround = False
                yellow_hero.drop = 5
                yellow_hero.rect.y += yellow_hero.drop

        if sprung_in_game is True:
            collisions = pygame.sprite.spritecollide(yellow_hero, sprung, False)
            if len(collisions) > 0:
                yellow_hero.jump *= jump_1.increaseJump
                yellow_hero.rect.y -= yellow_hero.jump
                crossing_sprung = True
            else:
                yellow_hero.jump = 250
                crossing_sprung = False

        collisions = pygame.sprite.spritecollide(yellow_hero, lava_blocks, False)
        if len(collisions) > 0:
            yellow_hero.health -= lava_1.damage
            yellow_hero.drop = 0
            crossing_lava = True

            if yellow_hero.health <= 0:
                dead_player = True
        else:
            crossing_lava = False

        collisions = pygame.sprite.spritecollide(yellow_hero, neutral_mobs, False)
        if len(collisions) > 0:
            crossing_2 = True
        else:
            crossing_2 = False

        if yellow_hero.rect.y > spikes_1.rect.y:
            collisions = pygame.sprite.spritecollide(yellow_hero, cliff_group, False)
            if len(collisions) > 0:
                yellow_hero.health -= spikes_1.damage
                dead_player = True

        if rock_dead is True:
            collisions = pygame.sprite.spritecollide(block_sand, cliff_group, False)
            if len(collisions) > 0:
                spikes_1.drop = 0
            else:
                spikes_1.drop = 7

        collisions = pygame.sprite.spritecollide(yellow_hero, wins, True)
        if len(collisions) > 0:
            if audio_On is True:
                wins_music.play()
            yellow_hero.star += 1

        collisions = pygame.sprite.spritecollide(fire, blocks_3, False)
        if len(collisions) > 0:
            fire.kill()

        collisions = pygame.sprite.spritecollide(yellow_hero, particles, True)
        if len(collisions) > 0:
            if audio_On is True:
                hit_worm.play()

            yellow_hero.health -= 30
            f_damage_mobs = True
            if yellow_hero.health <= 0:
                dead_player = True

        collisions = pygame.sprite.spritecollide(yellow_hero, mobs_fly, False)
        if len(collisions) > 0:
            if audio_On is True and fly_death == 0:
                hit_worm.play()

            if yellow_hero.rect.x > fly.rect.x:
                yellow_hero.rect.x += fly.kickback

            else:
                yellow_hero.rect.x -= fly.kickback

            yellow_hero.health -= fly.damage

            if yellow_hero.health <= 0:
                dead_player = True
            f_damage_mobs = True

        if fly_death > 0:
            collisions = pygame.sprite.spritecollide(fly, blocks_3, False)
            if len(collisions) > 0:
                fly.drop = 0
            else:
                fly.drop = 10
                fly.rect.y += fly.drop

        collisions = pygame.sprite.spritecollide(yellow_hero, ladder_group, False)
        if len(collisions) > 0:
            yellow_hero.AnimationClimb.blit(yellow_hero.image, (0, 0))
            yellow_hero.AnimationClimb.play()
            ladder_crossing = True
        else:
            ladder_crossing = False

        if task_2 is True:
            collisions = pygame.sprite.spritecollide(door_mid_1, player, False)
            if len(collisions) > 0:
                yellow_hero.rect.x = door_mid_2.rect.x

        collisions = pygame.sprite.spritecollide(exit_level, player, True)
        if len(collisions) > 0:
            game_completed = True

        for x_3 in range(pause_x, pause_x + 30):
            for y_3 in range(pause_y, pause_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing = True

        if fly_death == 0:
            for fly_x in range(fly.rect.x, fly.rect.x + 200):
                if yellow_hero.rect.x == fly_x:
                    entities_level_4.add(particles)
                    fire.rect.x = fly.rect.x - 10
                    fire.rect.y = fly.rect.y + 10
                    if yellow_hero.health > 0:
                        particles.add(fire)

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

            # Клавиши нажаты!
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    level_4 = False
            if event.type == MOUSEBUTTONDOWN:
                if event.button == 3 and download_bomb == 0:
                    if yellow_hero.amount_bomb <= 0:
                        print("Бомбы закончились!")
                    else:
                        # Координаты расположения бомбы
                        entities_level_4.add(inventory)
                        bomb.rect.x = yellow_hero.rect.x
                        bomb.rect.y = yellow_hero.rect.y + 156
                        yellow_hero.amount_bomb -= 1
                        download_bomb += 1

                        if audio_On is True:
                            sound_click.play()

                        confirmation = True
                if event.button == 1 and confirmation is True:
                    download_bomb -= 1
                    entities_level_4.remove(bomb)

                    if audio_On is True:
                        explosion.play()
                    confirmation = False

                    for x in range(bomb.rect.x - 230, bomb.rect.x + 230):
                        for y in range(bomb.rect.y - 130, bomb.rect.y + 130):
                            if x == rock.rect.x and y == rock.rect.y:
                                rock_dead = True
                                rock.kill()
                            if x == saw_1.rect.x and y == saw_1.rect.y:
                                saw_death = time
                                saw_1.health = 0
                            if x == fly.rect.x and y == fly.rect.y:
                                fly_death = time
                                fly.speed = 0
                                fly.kickback = 0
                                fly.damage = 0
                                fly.health -= bomb.damage

                if event.button == 1 and crossing is True:
                    if audio_On is True:
                        sound_click.play()
                    stop_game = True

                # Если прошли уровень и нажали кнопку, то выходим в меню
                if event.button == 1 and game_completed is True:
                    yellow_hero.count_money += 20
                    yellow_hero.level_4_completed = "T"
                    level_4 = False
                    menu()

                # Если игрок умер и нажата кнопка, то выходим в меню
                if event.button == 1 and dead_player is True:
                    level_4 = False
                    menu()

            if event.type == KEYDOWN:
                if event.key == K_RIGHT:
                    f_right_move = True
                if event.key == K_LEFT:
                    f_left_move = True
                if event.key == K_UP and yellow_hero.onGround is True and yellow_hero.health > 0:
                    if ladder_crossing is False:
                        f_up_move = True
                        yellow_hero.rect.y -= yellow_hero.jump
                        yellow_hero.onGround = False
                    else:
                        yellow_hero.rect.y -= 20
                if event.key == K_f:
                    press_f = True

                    # Клавиши отпущены
            if event.type == KEYUP:
                if event.key == K_RIGHT:
                    f_right_move = False
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                if event.key == K_LEFT:
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                    f_left_move = False
                if event.key == K_UP:
                    f_up_move = False
                if event.key == K_f:
                    press_f = False

        screen.blit(background_color_3, (0, 0))
        screen.blit(hudCoin_trans, (800, 10))

        if yellow_hero.amount_bomb > 0:
            screen.blit(hudBomb_trans, (800, 140))
        else:
            screen.blit(hudBombNo_trans, (800, 140))

        if yellow_hero.health <= 50 and yellow_hero.health > 0:
            screen.blit(hudHealthHalf_trans, (800, 70))
        elif yellow_hero.health <= 0:
            screen.blit(hudHealthEmpty_trans, (800, 70))
        else:
            screen.blit(hudHealth_trans, (800, 70))

        if yellow_hero.count_money < 10:
            screen.blit(fontImage, (x, y))
        else:
            screen.blit(fontImage, (x - 10, y))

        if yellow_hero.health >= 100:
            screen.blit(fontImage2, (x2, y2))
        else:
            screen.blit(fontImage2, (x2 + 20, y2))

        if yellow_hero.amount_bomb < 10:
            screen.blit(fontImage5, (x5, y5))
        else:
            screen.blit(fontImage5, (x5 - 10, y5))

        if stop_game is False:
            screen.blit(hudPause, (pause_x, pause_y))
        else:
            screen.blit(hudPlay, (pause_x, pause_y))
            pygame.display.update()

        if game_completed is True:

            inscription_wins = ("Congratulations! You wins! Press left click")
            (x6, y6, fontsize6) = (100, 300, 30)
            myFont6 = pygame.font.SysFont("None", fontsize6)
            fontImage6 = myFont6.render(inscription_wins, 0, green)

            screen.blit(fontImage6, (x6, y6))

        if dead_player is True:

            dead_text = ("You were killed! Press left click")
            (x4, y4, fontsize4) = (100, 300, 60)
            myFont4 = pygame.font.SysFont("None", fontsize4)
            fontImage4 = myFont4.render(dead_text, 0, red)

            lava_1.damage = 0
            lava_2.damage = 0
            spikes_1.damage = 0
            screen.blit(fontImage4, (x4, y4))

        # Игрок подошел к персонажу, но не вступил в диалог
        if crossing_2 is True and press_f is False and inter_dialog is False:

            talk = ("Talk with Saw (press F)")
            (x7, y7, fontsize) = (480, 320, 30)
            myFont7 = pygame.font.SysFont("None", fontsize)
            fontImage7 = myFont7.render(talk, 0, green)

            screen.blit(fontImage7, (x7, y7))
        # Игрок вступает в диалог
        elif crossing_2 is True and press_f is True:
            dialog = time
            inter_dialog = True
        # Игрок вышел из диалога
        elif crossing_2 is False and press_f is False:
            inter_dialog = False

        # Игрок уничтожил камень и вступил в разговор
        if crossing_2 is True and press_f is True and rock_dead is True:
            end_dialog = time

        # Игрок не уничтожил камень и вступил в разговор
        if inter_dialog is True and crossing_2 is True and rock_dead is False:
            if time - dialog < 100:

                phraze_1 = ("Hello, my name is Saw")
                (x8, y8, fontsize) = (480, 320, 30)
                myFont8 = pygame.font.SysFont("None", fontsize)
                fontImage8 = myFont8.render(phraze_1, 0, green)

                screen.blit(fontImage8, (x8, y8))
            if time - dialog > 100 and time - dialog < 200:

                phraze_2 = ("I would can to help you if you help me")
                (x8, y8, fontsize) = (480, 320, 30)
                myFont9 = pygame.font.SysFont("None", fontsize)
                fontImage9 = myFont9.render(phraze_2, 0, green)

                screen.blit(fontImage9, (x8, y8))
            if time - dialog > 200:

                phraze_3 = ("Destroy this rock!")
                (x8, y8, fontsize) = (480, 320, 30)
                myFont10 = pygame.font.SysFont("None", fontsize)
                fontImage10 = myFont10.render(phraze_3, 0, green)

                screen.blit(fontImage10, (x8, y8))

        # Игрок уничтожил камень и вступил в разговор
        if rock_dead is True and crossing_2 is True and inter_dialog is True and task_1 is False:
            phraze_4 = ("Thank you! That sprung help you")
            (x8, y8, fontsize) = (480, 320, 30)
            myFont10 = pygame.font.SysFont("None", fontsize)
            fontImage11 = myFont10.render(phraze_4, 0, green)

            screen.blit(fontImage11, (x8, y8))

        # После 1 выполненного квеста
        if task_1 is True and crossing_2 is True and inter_dialog is True and fly_death == 0:
            if time - dialog <= 100:
                phraze_5 = ("That fly cause irritation")
                (x8, y8, fontsize) = (480, 320, 30)
                myFont10 = pygame.font.SysFont("None", fontsize)
                fontImage12 = myFont10.render(phraze_5, 0, green)

                screen.blit(fontImage12, (x8, y8))
            else:
                phraze_6 = ("Climb up and destroy him")
                (x8, y8, fontsize) = (480, 320, 30)
                myFont10 = pygame.font.SysFont("None", fontsize)
                fontImage13 = myFont10.render(phraze_6, 0, green)

                screen.blit(fontImage13, (x8, y8))

        if task_1 is True and crossing_2 is True and inter_dialog is True and fly_death != 0 and task_2 is False:
            if time - dialog <= 100:
                phraze_7 = ("Thank you. It does not bother me")
                (x8, y8, fontsize) = (480, 320, 30)
                myFont10 = pygame.font.SysFont("None", fontsize)
                fontImage14 = myFont10.render(phraze_7, 0, green)

                screen.blit(fontImage14, (x8, y8))
            if time - dialog > 100 and time - dialog <= 200:
                phraze_8 = ("I will open door you!")
                (x8, y8, fontsize) = (480, 320, 30)
                myFont10 = pygame.font.SysFont("None", fontsize)
                fontImage15 = myFont10.render(phraze_8, 0, green)

                screen.blit(fontImage15, (x8, y8))
            if time - dialog > 200:
                saw_1.rect.x = 3400
                saw_1.rect.y = 400
                door_mid_1.open = True
                door_top_1.open = True
                task_2 = True

        if task_2 is True and crossing_2 is True and inter_dialog is True:
            phraze_9 = ("This is end! Go to the new level")
            (x8, y8, fontsize) = (480, 320, 30)
            myFont10 = pygame.font.SysFont("None", fontsize)
            fontImage16 = myFont10.render(phraze_9, 0, green)

            screen.blit(fontImage16, (x8, y8))

        # Игрок уничтожил камень и прочитал надпись
        if rock_dead is True and time - end_dialog > 100 and end_dialog != 0 and task_1 is False:
            # Телепортируется на новую точку и добавляет пружину
            saw_1.rect.x = 1800
            saw_1.rect.y = 400
            task_1 = True
            entities_level_4.add(sprung)
            sprung_in_game = True

        clock.tick(40)

        # Рисуем персонажей!
        for event in entities_level_4:
            screen.blit(event.image, camera_4.apply(event))
            camera_4.update(yellow_hero)

        if stop_game is False:
            if dead_player is False:
                player.update(f_left_move, f_right_move, f_up_move, f_damage_mobs)
                neutral_mobs.update()
                cliff_group.update()
                mobs_fly.update()
                particles.update()
                door_group.update()
                if sprung_in_game is True:
                    sprung.update()

            if time - saw_death > 100 and saw_death != 0:
                saw_1.kill()

            if time - fly_death > 100 and fly_death != 0:
                fly.kill()

            pygame.display.update()
            time += 1
        else:
            pause()


def rungame_level_5(f_left_move, f_right_move, f_up_move, f_damage_mobs):

    level_5 = True  # Игра запущена!
    confirmation = False  # Бомба не установлена!
    stop_game = False  # Игра не остановлена
    download_bomb = 0  # Количество установленных бомб!
    dead_player = False  # Игрок не умер
    game_completed = False  # Уровень не пройден
    yellow_boss_death = False  # Босс не убит
    time_explosion = 0  # Время взрыва
    time = 0  # Время игры

    yellow_hero.health = 100
    yellow_hero.rect.x = 20
    yellow_hero.rect.y = 314

    yellow_boss.health = 300
    yellow_boss.rect.x = 600
    yellow_boss.rect.y = 404

    exit_level.rect.x = 1880
    exit_level.rect.y = 450

    if not entities_level_5.has(yellow_hero):
        player.add(yellow_hero)
        entities_level_5.add(player)

    if not entities_level_5.has(yellow_boss):
        boss_group.add(yellow_boss)
        entities_level_5.add(boss_group)

    if entities_level_5.has(exit_level):
        entities_level_5.remove(table)

    while level_5:

        crossing = False  # Нет пересечения с изображением

        text_money = (str(yellow_hero.count_money))
        (x, y, fontsize) = (780, 35, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage = myFont.render(text_money, 0, green)

        health = (str(yellow_hero.health))
        (x2, y2, fontsize) = (745, 98, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage2 = myFont.render(health, 0, green)

        no_bomb = (str(yellow_hero.amount_bomb))
        (x5, y5, fontsize) = (770, 170, 45)
        myFont5 = pygame.font.SysFont("None", fontsize)
        fontImage5 = myFont5.render(no_bomb, 0, green)

        collisions = pygame.sprite.spritecollide(yellow_hero, planet_group, False)
        if len(collisions) > 0:
            yellow_hero.onGround = True
            yellow_hero.drop = 0
        else:
            yellow_hero.onGround = False
            yellow_hero.drop = 5
            yellow_hero.rect.y += yellow_hero.drop

        collisions = pygame.sprite.spritecollide(yellow_hero, boss_group, False)
        if len(collisions) > 0:
            if audio_On is True:
                hit_worm.play()
            yellow_hero.health -= yellow_boss.damage

            if yellow_boss.rect.x > yellow_hero.rect.x:
                yellow_hero.rect.x -= yellow_boss.kickback
            else:
                yellow_hero.rect.x += yellow_boss.kickback

            if yellow_hero.health <= 0:
                dead_player = True

        if yellow_boss_death is True:
            collisions = pygame.sprite.spritecollide(exit_level, player, True)
            if len(collisions) > 0:
                game_completed = True

        for x_3 in range(pause_x, pause_x + 30):
            for y_3 in range(pause_y, pause_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing = True

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

            # Клавиши нажаты!
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    level_5 = False
            if event.type == MOUSEBUTTONDOWN:
                if event.button == 3 and download_bomb == 0:
                    if yellow_hero.amount_bomb <= 0:
                        print("Бомбы закончились!")
                    else:
                        # Координаты расположения бомбы
                        entities_level_5.add(inventory)
                        bomb.rect.x = yellow_hero.rect.x
                        bomb.rect.y = yellow_hero.rect.y + 156
                        yellow_hero.amount_bomb -= 1
                        download_bomb += 1

                        if audio_On is True:
                            sound_click.play()

                        confirmation = True
                if event.button == 1 and confirmation is True:
                    download_bomb -= 1
                    entities_level_5.remove(bomb)

                    if audio_On is True:
                        explosion.play()
                    confirmation = False

                    for x in range(bomb.rect.x - 230, bomb.rect.x + 230):
                        for y in range(bomb.rect.y - 130, bomb.rect.y + 130):
                            if x == yellow_boss.rect.x and y == yellow_boss.rect.y:
                                yellow_boss.health -= bomb.damage
                                yellow_boss.speed = 2
                                time_explosion = time

                                if yellow_boss.health <= 0:
                                    yellow_hero.count_money += 30
                                    yellow_boss_death = True
                                    entities_level_5.add(table)
                                    yellow_boss.kill()

                if event.button == 1 and crossing is True:
                    if audio_On is True:
                        sound_click.play()
                    stop_game = True

                if event.button == 1 and game_completed is True:
                    horror_music.pause()
                    yellow_hero.count_money += 25
                    menu()

                if event.button == 1 and dead_player is True:
                    horror_music.pause()
                    menu()

            if event.type == KEYDOWN:
                if event.key == K_RIGHT:
                    f_right_move = True
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                if event.key == K_LEFT:
                    if audio_On is True and yellow_hero.onGround is True:
                        sound_step.play()
                    f_left_move = True
                if event.key == K_UP and yellow_hero.onGround == True:
                    f_up_move = True
                    yellow_hero.rect.y -= yellow_hero.jump
                    yellow_hero.onGround = False

                    # Клавиши отпущены
            if event.type == KEYUP:
                if event.key == K_RIGHT:
                    f_right_move = False
                if event.key == K_LEFT:
                    f_left_move = False
                if event.key == K_UP:
                    f_up_move = False

        if time - time_explosion > 100 and time_explosion != 0:
            yellow_boss.speed = 5

        screen.blit(background_color_4, (0, 0))
        screen.blit(hudCoin_trans, (800, 10))

        if yellow_hero.amount_bomb > 0:
            screen.blit(hudBomb_trans, (800, 140))
        else:
            screen.blit(hudBombNo_trans, (800, 140))

        if yellow_hero.health <= 50 and yellow_hero.health > 0:
            screen.blit(hudHealthHalf_trans, (800, 70))
        elif yellow_hero.health <= 0:
            screen.blit(hudHealthEmpty_trans, (800, 70))
        else:
            screen.blit(hudHealth_trans, (800, 70))

        if yellow_hero.count_money < 10:
            screen.blit(fontImage, (x, y))
        else:
            screen.blit(fontImage, (x - 10, y))
        if yellow_hero.health >= 100:
            screen.blit(fontImage2, (x2, y2))
        else:
            screen.blit(fontImage2, (x2 + 20, y2))
        if yellow_hero.amount_bomb < 10:
            screen.blit(fontImage5, (x5, y5))
        else:
            screen.blit(fontImage5, (x5 - 10, y5))
        if stop_game is False:
            screen.blit(hudPause, (pause_x, pause_y))
        else:
            screen.blit(hudPlay, (pause_x, pause_y))
            pygame.display.update()

        if game_completed is True:

            inscription_wins = ("Congratulations! You wins! Press left click")
            (x6, y6, fontsize6) = (100, 300, 30)
            myFont6 = pygame.font.SysFont("None", fontsize6)
            fontImage6 = myFont6.render(inscription_wins, 0, green)

            screen.blit(fontImage6, (x6, y6))
        if dead_player is True:

            dead_text = ("You were killed! Press left click")
            (x4, y4, fontsize4) = (100, 300, 60)
            myFont4 = pygame.font.SysFont("None", fontsize4)
            fontImage4 = myFont4.render(dead_text, 0, red)

            screen.blit(fontImage4, (x4, y4))

        clock.tick(40)

        # Рисуем персонажей!
        for event in entities_level_5:
            screen.blit(event.image, camera_5.apply(event))
            camera_5.update(yellow_hero)

            # Обновляем персонажей
        if stop_game is False:
            if dead_player is False:
                player.update(f_left_move, f_right_move, f_up_move, f_damage_mobs)
                boss_group.update()

            if audio_On is True:
                horror_music.play()

            time += 1
            pygame.display.update()

        else:
            horror_music.pause()
            pause()


def menu():
    lobby = True  # Игрок в меню
    global audio_On
    global level_1_load
    global level_2_load
    global level_3_load
    global level_4_load
    global level_5_load
    global music_On
    audio_On = True  # Музыка включена
    level_1_load = False  # Уровень 1 не запущен
    level_2_load = False  # Уровень 2 не запущен
    level_3_load = False  # Уровень 3 не запущен
    level_4_load = False  # Уровень 4 не запущен
    level_5_load = False  # Уровень 5 не запущен
    menu_load = False  # Всплывающее меню
    fullScreen = False  # Полноэкранный режим
    music_On = True  # Музыка включена
    shop_load = False  # Магазин не открыт
    settings = False  # Настройки не включены
    shop_character = False  # Покупка персонажей в магазине не выбрана
    shop_tools = False  # Покупка инстументов не выбрана
    increase_bomb = False  # Не покупаем бомбы
    level_select = False  # Выбор уровня
    price_bomb = 5  # Цена за бомбу
    save = False  # Игрок не нажал кнопку сохранения

    while lobby is True:

        crossing = False  # Нет пересечения с кнопкой запуска игры
        crossing_2 = False  # Нет пересечения с кнопкой звука
        crossing_3 = False  # Нет пересечения с кнопкой полнокэранного режима
        crossing_4 = False  # Нет пересечения с кнопкой меню
        crossing_5 = False  # Нет пересечения с кнопкой магазина
        crossing_6 = False  # Нет пересечения с кнопкой кубка
        crossing_7 = False  # Нет пересечения с кнопкой выхода
        crossing_8 = False  # Нет пересечения с кнопкой музыки
        crossing_9 = False  # Нет пересечения с кнопкой возврата
        crossing_10 = False  # Нет пересечения с кнопкой настроек
        crossing_11 = False  # Нет пересечения со второй кнопкой возврата
        crossing_12 = False  # Нет пересечения с иконкой персонажа в магазине
        crossing_13 = False  # Нет пересечения с иконкой бомбы
        crossing_14 = False  # Нет пересечения с кнопкой плюса
        crossing_15 = False  # Нет пересечения с кнопкой выбора уровня
        crossing_16 = False  # Нет пересечения с кнопкой первого уровня
        crossing_17 = False  # Нет пересечения с кнопкой выхода из выбора уровня
        crossing_18 = False  # Нет пересечения с кнопкой второго уровня
        crossing_19 = False  # Нет пересечения с кнопкой сохранения
        crossing_20 = False  # Нет пересечения с кнопкой третьего уровня
        crossing_21 = False  # Нет пересечения с кнопкой четвертого уровня
        crossing_22 = False  # Нет пересечения с кнопкой пятого уровня
        crossing_23 = False  # Нет пересечения с кнопкой выбора бежевого персонажа
        crossing_24 = False  # Нет пересечения с кнопкой выбора желтого персонажа
        crossing_25 = False  # Нет пересечения с кнопкой выбора розового персонажа
        crossing_26 = False  # Нет пересечения с кнопкой выбора синего персонажа
        crossing_27 = False  # Нет пересечения с кнопкой выбора зеленого персонажа

        no_bomb = (str(yellow_hero.amount_bomb))
        (x6, y6, fontsize) = (540, 310, 45)
        myFont5 = pygame.font.SysFont("None", fontsize)
        fontImage5 = myFont5.render(no_bomb, 0, green)

        text_money = (str(yellow_hero.count_money))
        (x, y, fontsize) = (728, 85, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage = myFont.render(text_money, 0, green)

        bomb_pr = (str(price_bomb))
        (x2, y2, fontsize) = (450, 400, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage7 = myFont.render(bomb_pr, 0, green)

        hud_star = (str(yellow_hero.star))
        (x4, y4, fontsize) = (645, 85, 45)
        myFont = pygame.font.SysFont("None", fontsize)
        fontImage9 = myFont.render(hud_star, 0, green)

        for x_3 in range(start_x, start_x + 90):
            for y_3 in range(start_y + 20, start_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing = True

        for x_3 in range(audio_x, audio_x + 30):
            for y_3 in range(audio_y, audio_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_2 = True

        for x_3 in range(fullScreen_x, fullScreen_x + 30):
            for y_3 in range(fullScreen_y, fullScreen_y + 30):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_3 = True

        for x_3 in range(menu_x, menu_x + 45):
            for y_3 in range(menu_y, menu_y + 45):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_4 = True

        for x_3 in range(shop_x, shop_x + 35):
            for y_3 in range(shop_y, shop_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_5 = True

        for x_3 in range(trophy_x, trophy_x + 35):
            for y_3 in range(trophy_y, trophy_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_6 = True

        for x_3 in range(quit_x, quit_x + 35):
            for y_3 in range(quit_y, quit_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_7 = True

        for x_3 in range(music_x, music_x + 35):
            for y_3 in range(music_y, music_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_8 = True

        for x_3 in range(return_x, return_x + 35):
            for y_3 in range(return_y, return_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_9 = True

        for x_3 in range(settings_x, settings_x + 35):
            for y_3 in range(settings_y, settings_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_10 = True

        for x_3 in range(return_x_2, return_x_2 + 35):
            for y_3 in range(return_y_2, return_y_2 + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_11 = True

        for x_3 in range(yellowPlayer_x_2, yellowPlayer_x_2 + 105):
            for y_3 in range(yellowPlayer_y_2, yellowPlayer_y_2 + 240):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_12 = True

        for x_3 in range(bomb_x, bomb_x + 110):
            for y_3 in range(bomb_y + 10, bomb_y + 125):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_13 = True

        for x_3 in range(plus_x, plus_x + 35):
            for y_3 in range(plus_y, plus_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_14 = True

        for x_3 in range(select_x, select_x + 90):
            for y_3 in range(select_y + 20, select_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_15 = True

        for x_3 in range(number_1_x + 30, number_1_x + 80):
            for y_3 in range(number_1_y + 20, number_1_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_16 = True

        for x_3 in range(quitX_x + 30, quitX_x + 80):
            for y_3 in range(quitX_y + 20, quitX_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_17 = True

        for x_3 in range(number_2_x + 30, number_2_x + 80):
            for y_3 in range(number_2_y + 20, number_2_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_18 = True

        for x_3 in range(save_2_x, save_2_x + 40):
            for y_3 in range(save_2_y, save_2_y + 40):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_19 = True

        for x_3 in range(number_3_x + 30, number_3_x + 80):
            for y_3 in range(number_3_y + 20, number_3_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_20 = True

        for x_3 in range(number_4_x + 30, number_4_x + 80):
            for y_3 in range(number_4_y + 20, number_4_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_21 = True

        for x_3 in range(number_5_x + 30, number_5_x + 80):
            for y_3 in range(number_5_y + 20, number_5_y + 80):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_22 = True

        for x_3 in range(beigePlayer_x, beigePlayer_x + 105):
            for y_3 in range(beigePlayer_y, beigePlayer_y + 240):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_23 = True

        for x_3 in range(yellowPlayer_x, yellowPlayer_x + 105):
            for y_3 in range(yellowPlayer_y, yellowPlayer_y + 240):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_24 = True

        for x_3 in range(pinkPlayer_x, pinkPlayer_x + 105):
            for y_3 in range(pinkPlayer_y, pinkPlayer_y + 240):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_25 = True

        for x_3 in range(bluePlayer_x, bluePlayer_x + 105):
            for y_3 in range(bluePlayer_y, bluePlayer_y + 240):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_26 = True

        for x_3 in range(greenPlayer_x, greenPlayer_x + 105):
            for y_3 in range(greenPlayer_y, greenPlayer_y + 240):
                pos = pygame.mouse.get_pos()
                pos_x = pos[0]
                pos_y = pos[1]
                if pos_x == x_3 and pos_y == y_3:
                    crossing_27 = True

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == MOUSEBUTTONDOWN:
                if event.button == 1 and crossing is True and shop_load is False and level_select is False:
                    if audio_On is True:
                        switch_button.play()
                    if yellow_hero.level_2_completed == "F":
                        level_1_load = True
                        entities.add(player)
                        entities.add(blocks)
                        entities.add(money)
                        entities.add(mobs_worm)
                        entities.add(mobs_fly)
                        entities.add(money_wins)
                        entities.add(wins)
                        entities.add(table)
                        rungame(left_move, right_move, up_move, damage_mobs)
                    elif yellow_hero.level_3_completed == "F" and yellow_hero.level_2_completed == "T":
                        level_2_load = True
                        entities_level_2.add(player)
                        entities_level_2.add(blocks)
                        entities_level_2.add(box)
                        rungame_level_2(left_move, right_move, up_move, damage_mobs, go_attack, collide_ground, return_in_usual)
                    elif yellow_hero.level_4_completed == "F" and yellow_hero.level_3_completed == "T":
                        level_3_load = True
                        entities_level_3.add(player)
                        entities_level_3.add(water_blocks)
                        entities_level_3.add(blocks_2)
                        entities_level_3.add(swim_mobs)
                        entities_level_3.add(stone_group)
                        entities_level_3.add(table)
                        entities_level_3.add(money_2)
                        entities_level_3.add(money_wins)
                        entities_level_3.add(game_box)
                        rungame_level_3(left_move, right_move, up_move, damage_mobs)
                    elif yellow_hero.level_4_completed == "T" and yellow_hero.star < 3:
                        level_4_load = True
                        entities_level_4.add(player)
                        entities_level_4.add(blocks_3)
                        entities_level_4.add(neutral_mobs)
                        entities_level_4.add(lava_blocks)
                        entities_level_4.add(stone_group)
                        entities_level_4.add(wins)
                        entities_level_4.add(cliff_group)
                        entities_level_4.add(mobs_fly)
                        entities_level_4.add(door_group)
                        entities_level_4.add(ladder_group)
                        entities_level_4.add(table)
                        rungame_level_4(left_move, right_move, up_move, damage_mobs)
                    else:
                        level_5_load = True
                        entities_level_5.add(player)
                        entities_level_5.add(planet_group)
                        entities_level_5.add(boss_group)
                        rungame_level_5(left_move, right_move, up_move, damage_mobs)

                if event.button == 1 and crossing_2 is True and settings is True:
                    if audio_On is True:
                        switch_1.play()
                    audio_On = not audio_On

                if event.button == 1 and crossing_10 is True and settings is False:
                    if audio_On is True:
                        switch_1.play()
                    settings = True

                if event.button == 1 and crossing_3 is True:
                    if audio_On is True:
                        switch_1.play()
                    if fullScreen == False:
                        toggle_screen()
                    else:
                        toggle_fullscreen()
                    fullScreen = not fullScreen

                if event.button == 1 and crossing_4 is True and menu_load is False:
                    if audio_On is True:
                        switch_1.play()
                    menu_load = True
                    level_select = False

                elif event.button == 1 and crossing_5 is True and menu_load is True:
                    if audio_On is True:
                        switch_1.play()
                    shop_load = True
                    level_select = False

                if event.button == 1 and crossing_6 is True and menu_load is True:
                    if audio_On is True:
                        switch_1.play()

                if event.button == 1 and crossing_7 is True and menu_load is True:
                    if audio_On is True:
                        switch_1.play()
                    pygame.quit()
                    sys.exit()

                if event.button == 1 and crossing_8 is True:
                    music_On = not music_On
                    if audio_On is True:
                        switch_1.play()

                if event.button == 1 and crossing_9 is True and menu_load is True:
                    if audio_On is True:
                        switch_1.play()
                    menu_load = False
                    shop_load = False
                    shop_character = False
                    shop_tools = False

                if event.button == 1 and crossing_11 is True:
                    if audio_On is True:
                        switch_1.play()
                    settings = False

                if event.button == 1 and crossing_12 is True and shop_load is True and shop_tools is False:
                    if audio_On is True:
                        switch_1.play()
                    shop_character = True

                if event.button == 1 and crossing_13 is True and shop_load is True:
                    if audio_On is True:
                        switch_1.play()
                    shop_tools = True

                if event.button == 1 and crossing_14 is True and shop_tools is True:
                    if audio_On is True:
                        switch_1.play()
                    increase_bomb = True

                if event.button == 1 and crossing_15 is True and shop_load is False:
                    if audio_On is True:
                        switch_button.play()
                    level_select = True

                if event.button == 1 and crossing_16 is True and level_select is True:
                    if audio_On is True:
                        switch_button.play()
                    level_1_load = True
                    entities.add(player)
                    entities.add(blocks)
                    entities.add(money)
                    entities.add(mobs_worm)
                    entities.add(mobs_fly)
                    entities.add(money_wins)
                    entities.add(wins)
                    entities.add(table)
                    rungame(left_move, right_move, up_move, damage_mobs)

                if event.button == 1 and crossing_17 is True and level_select is True:
                    if audio_On is True:
                        switch_1.play()
                    level_select = False

                if event.button == 1 and crossing_18 is True and level_select is True:
                    if yellow_hero.level_1_completed == "T":
                        if audio_On is True:
                            switch_button.play()
                        level_2_load = True
                        entities_level_2.add(player)
                        entities_level_2.add(blocks)
                        entities_level_2.add(box)
                        rungame_level_2(left_move, right_move, up_move, damage_mobs, go_attack, collide_ground, return_in_usual)
                    else:
                        if audio_On is True:
                            locked_click.play()

                if event.button == 1 and crossing_19 is True and menu_load is True:
                    if audio_On is True:
                        switch_1.play()
                    save = True
                    # Записываем количество денег, звезд  и бомб в файл
                    f = open("Save.txt", "w")
                    if yellow_hero.count_money < 10:
                        f.write(str("0") + str(yellow_hero.count_money))
                    else:
                        f.write(str(yellow_hero.count_money))
                    f.write(str("\n"))
                    if yellow_hero.star < 10:
                        f.write(str("0") + str(yellow_hero.star))
                    else:
                        f.write(str(yellow_hero.star))
                    f.write(str("\n"))
                    if yellow_hero.star < 10:
                        f.write(str("0") + str(yellow_hero.amount_bomb))
                    else:
                        f.write(str(yellow_hero.amount_bomb))

                    # Записываем пройденные уровни
                    f.write(str("\n"))
                    f.write(str("\n"))
                    f.write(yellow_hero.level_1_completed)
                    f.write(yellow_hero.level_2_completed)
                    f.write(yellow_hero.level_3_completed)
                    f.write(yellow_hero.level_4_completed)
                    f.write(yellow_hero.yellow)
                    f.write(yellow_hero.beige)
                    f.write(yellow_hero.pink)
                    f.write(yellow_hero.blue)
                    f.write(yellow_hero.green)
                    f.close()

                if event.button == 1 and level_select is True and crossing_20 is True:
                    if yellow_hero.level_2_completed == "T":
                        if audio_On is True:
                            switch_button.play()
                        level_3_load = True
                        entities_level_3.add(player)
                        entities_level_3.add(water_blocks)
                        entities_level_3.add(blocks_2)
                        entities_level_3.add(swim_mobs)
                        entities_level_3.add(stone_group)
                        entities_level_3.add(table)
                        entities_level_3.add(money_2)
                        entities_level_3.add(money_wins)
                        entities_level_3.add(game_box)
                        rungame_level_3(left_move, right_move, up_move, damage_mobs)
                    else:
                        if audio_On is True:
                            locked_click.play()

                if event.button == 1 and level_select is True and crossing_21 is True:
                    if yellow_hero.level_3_completed == "T":
                        if audio_On is True:
                            switch_button.play()
                        level_4_load = True
                        entities_level_4.add(player)
                        entities_level_4.add(blocks_3)
                        entities_level_4.add(neutral_mobs)
                        entities_level_4.add(lava_blocks)
                        entities_level_4.add(stone_group)
                        entities_level_4.add(wins)
                        entities_level_4.add(cliff_group)
                        entities_level_4.add(mobs_fly)
                        entities_level_4.add(door_group)
                        entities_level_4.add(ladder_group)
                        entities_level_4.add(table)
                        rungame_level_4(left_move, right_move, up_move, damage_mobs)
                    else:
                        if audio_On is True:
                            locked_click.play()

                if event.button == 1 and level_select is True and crossing_22 is True:
                    if yellow_hero.level_4_completed == "T" and yellow_hero.star >= 3:
                        if audio_On is True:
                            switch_button.play()
                        level_5_load = True
                        entities_level_5.add(player)
                        entities_level_5.add(planet_group)
                        entities_level_5.add(boss_group)
                        rungame_level_5(left_move, right_move, up_move, damage_mobs)
                    else:
                        if audio_On is True:
                            locked_click.play()

                if event.button == 1 and shop_character is True and crossing_23 is True:
                    if yellow_hero.level_2_completed == "T":
                        yellow_hero.beige = "T"
                        yellow_hero.yellow = "F"
                        yellow_hero.pink = "F"
                        yellow_hero.blue = "F"
                        yellow_hero.green = "F"
                        if audio_On is True:
                            switch_button.play()
                        yellow_hero.image = image_hero_2
                        yellow_hero.AnimationRight = beige_anim_right
                        yellow_hero.AnimationStay = beige_anim_stay
                        yellow_hero.AnimationJump = beige_anim_jump
                        yellow_hero.AnimationHit = beige_anim_hit
                        yellow_hero.AnimationClimb = beige_anim_climb
                        yellow_hero.AnimationSwim = beige_anim_swim
                    else:
                        if audio_On is True:
                            locked_click.play()

                if event.button == 1 and shop_character is True and crossing_24 is True:
                    yellow_hero.yellow = "T"
                    yellow_hero.beige = "F"
                    yellow_hero.pink = "F"
                    yellow_hero.blue = "F"
                    yellow_hero.green = "F"
                    if audio_On is True:
                        switch_button.play()
                    yellow_hero.image = image_hero_1
                    yellow_hero.AnimationRight = yellow_anim_right
                    yellow_hero.AnimationStay = yellow_anim_stay
                    yellow_hero.AnimationJump = yellow_anim_jump
                    yellow_hero.AnimationHit = yellow_anim_hit
                    yellow_hero.AnimationClimb = yellow_anim_climb
                    yellow_hero.AnimationSwim = yellow_anim_swim

                if event.button == 1 and shop_character is True and crossing_25 is True:
                    if yellow_hero.level_3_completed == "T":
                        yellow_hero.pink = "T"
                        yellow_hero.beige = "F"
                        yellow_hero.yellow = "F"
                        yellow_hero.blue = "F"
                        yellow_hero.green = "F"
                        if audio_On is True:
                            switch_button.play()
                        yellow_hero.image = image_hero_3
                        yellow_hero.AnimationRight = pink_anim_right
                        yellow_hero.AnimationStay = pink_anim_stay
                        yellow_hero.AnimationJump = pink_anim_jump
                        yellow_hero.AnimationHit = pink_anim_hit
                        yellow_hero.AnimationClimb = pink_anim_climb
                        yellow_hero.AnimationSwim = pink_anim_swim
                    else:
                        if audio_On is True:
                            locked_click.play()

                if event.button == 1 and shop_load is True and crossing_26 is True:
                    if yellow_hero.level_4_completed == "T":
                        yellow_hero.blue = "T"
                        yellow_hero.beige = "F"
                        yellow_hero.yellow = "F"
                        yellow_hero.pink = "F"
                        yellow_hero.green = "F"
                        if audio_On is True:
                            switch_button.play()
                        yellow_hero.image = image_hero_4
                        yellow_hero.AnimationRight = blue_anim_right
                        yellow_hero.AnimationStay = blue_anim_stay
                        yellow_hero.AnimationJump = blue_anim_jump
                        yellow_hero.AnimationHit = blue_anim_hit
                        yellow_hero.AnimationClimb = blue_anim_climb
                        yellow_hero.AnimationSwim = blue_anim_swim
                    else:
                        if audio_On is True:
                            locked_click.play()

                if event.button == 1 and shop_load is True and crossing_27 is True:
                    if yellow_hero.star >= 3 and yellow_hero.count_money >= 40:
                        yellow_hero.green = "T"
                        yellow_hero.beige = "F"
                        yellow_hero.yellow = "F"
                        yellow_hero.pink = "F"
                        yellow_hero.blue = "F"
                        if audio_On is True:
                            switch_button.play()
                        yellow_hero.image = image_hero_5
                        yellow_hero.AnimationRight = green_anim_right
                        yellow_hero.AnimationStay = green_anim_stay
                        yellow_hero.AnimationJump = green_anim_jump
                        yellow_hero.AnimationHit = green_anim_hit
                        yellow_hero.AnimationClimb = green_anim_climb
                        yellow_hero.AnimationSwim = green_anim_swim
                    else:
                        if audio_On is True:
                            locked_click.play()

        clock.tick(40)

        screen.blit(background_color, (0, 0))
        screen.blit(hudCoin_trans, (coin_x, coin_y))
        if yellow_hero.count_money < 10:
            screen.blit(fontImage, (x, y))
        else:
            screen.blit(fontImage, (x - 9, y))

        if yellow_hero.yellow == "T":
            screen.blit(hudLevel, (level_x, level_y))
        elif yellow_hero.beige == "T":
            screen.blit(hudLevel_2, (level_x, level_y))
        elif yellow_hero.pink == "T":
            screen.blit(hudLevel_3, (level_x, level_y))
        elif yellow_hero.blue == "T":
            screen.blit(hudLevel_4, (level_x, level_y))
        else:
            screen.blit(hudLevel_5, (level_x, level_y))

        screen.blit(hudStar_trans, (600, -3))
        screen.blit(fontImage9, (x4, y4))

        if menu_load is False and level_select is False:
            screen.blit(button_menu, (start_x, start_y))
            screen.blit(button_select, (select_x, select_y))

        if level_select is True:

            change_level = ("Choose level")
            (x3, y3, fontsize) = (300, 100, 50)
            myFont = pygame.font.SysFont("None", fontsize)
            fontImage8 = myFont.render(change_level, 0, blue)

            screen.blit(fontImage8, (x3, y3))
            screen.blit(hudNumber1, (number_1_x, number_1_y))
            screen.blit(hudNumber2, (number_2_x, number_2_y))
            screen.blit(hudNumber3, (number_3_x, number_3_y))
            screen.blit(hudNumber4, (number_4_x, number_4_y))
            screen.blit(hudNumber5, (number_5_x, number_5_y))
            screen.blit(hudQuitX, (quitX_x, quitX_y))

            if yellow_hero.level_1_completed == "F":
                screen.blit(hudLockedPlayer, (locked_level_2_x, locked_level_2_y))

            if yellow_hero.level_2_completed == "F":
                screen.blit(hudLockedPlayer, (locked_level_3_x, locked_level_3_y))

            if yellow_hero.level_3_completed == "F":
                screen.blit(hudLockedPlayer, (locked_level_4_x, locked_level_4_y))

            if yellow_hero.level_4_completed == "F" or yellow_hero.star < 3:
                screen.blit(hudLockedPlayer, (locked_level_5_x, locked_level_5_y))

        if settings is True:
            if fullScreen is True:
                screen.blit(hudWindow, (fullScreen_x, fullScreen_y))
            else:
                screen.blit(hudFullcreen, (fullScreen_x, fullScreen_y))

            if audio_On is True:
                screen.blit(hudAudio, (audio_x, audio_y))
            else:
                screen.blit(hudAudioOff, (audio_x_off, audio_y_off))

            if music_On is False:
                screen.blit(hudMusic_off, (music_x, music_y))
                main_music.pause()
            else:
                screen.blit(hudMusic_on, (music_x, music_y))
                if audio_On is True and main_music.playing is False:
                    main_music.play()
                else:
                    main_music.pause()

            screen.blit(hudReturn, (return_x_2, return_y_2))
        else:
            screen.blit(hudSettings, (settings_x, settings_y))

        if menu_load is False:
            screen.blit(hudMenu, (menu_x, menu_y))
        else:
            screen.blit(hudShop, (shop_x, shop_y))
            screen.blit(hudTrophy, (trophy_x, trophy_y))
            screen.blit(hudQuit, (quit_x, quit_y))
            screen.blit(hudSave_2, (save_2_x, save_2_y))
            screen.blit(hudReturn, (return_x, return_y))

        if shop_load is True:
            if shop_character is True:
                screen.blit(hudYellowPlayer, (yellowPlayer_x, yellowPlayer_y))
                screen.blit(hudGreenPlayer, (greenPlayer_x, greenPlayer_y))
                screen.blit(hudBluePlayer, (bluePlayer_x, bluePlayer_y))
                screen.blit(hudBeigePlayer, (beigePlayer_x, beigePlayer_y))
                screen.blit(hudPinkPlayer, (pinkPlayer_x, pinkPlayer_y))

                if yellow_hero.level_2_completed == "F":
                    screen.blit(hudLockedPlayer, (locked_x, locked_y))
                if yellow_hero.level_3_completed == "F":
                    screen.blit(hudLockedPlayer, (locked_x + 130, locked_y))
                if yellow_hero.level_4_completed == "F":
                    screen.blit(hudLockedPlayer, (locked_x + 260, locked_y))
                if yellow_hero.star < 3:
                    screen.blit(hudLockedPlayer, (locked_x + 390, locked_y))

                if yellow_hero.yellow == "T":
                    screen.blit(hudCheckMark, (check_x, check_y))
                elif yellow_hero.beige == "T":
                    screen.blit(hudCheckMark, (check_x + 130, check_y))
                elif yellow_hero.pink == "T":
                    screen.blit(hudCheckMark, (check_x + 260, check_y))
                elif yellow_hero.blue == "T":
                    screen.blit(hudCheckMark, (check_x + 390, check_y))
                else:
                    screen.blit(hudCheckMark, (check_x + 520, check_y))
            elif shop_tools is True:
                screen.blit(hudBomb, (bomb_x, bomb_y - 100))
                screen.blit(hudPlus, (plus_x, plus_y))
                screen.blit(hudCoin_trans, (coin_x_2, coin_y_2))
                screen.blit(fontImage5, (x6, y6))
                screen.blit(fontImage7, (x2, y2))
                if increase_bomb is True:
                    if yellow_hero.count_money >= 5:
                        yellow_hero.amount_bomb += 1
                        yellow_hero.count_money -= 5
                    else:
                        lowmoney = ("Not enough money")
                        (x7, y7, fontsize) = (300, 100, 50)
                        myFont = pygame.font.SysFont("None", fontsize)
                        fontImage11 = myFont.render(lowmoney, 0, blue)

                        screen.blit(fontImage11, (x7, y7))
                    increase_bomb = False
            else:
                screen.blit(hudYellowPlayer, (yellowPlayer_x_2, yellowPlayer_y_2))
                screen.blit(hudBomb, (bomb_x, bomb_y))

        if save is True:

            save_game = ("Game was saved")
            (x5, y5, fontsize) = (300, 100, 50)
            myFont = pygame.font.SysFont("None", fontsize)
            fontImage10 = myFont.render(save_game, 0, blue)

            screen.blit(fontImage10, (x5, y5))
            if menu_load is False or shop_load is True or settings is True:
                save = False

        if audio_On is True and music_On is True:
            main_music.play()
        else:
            main_music.pause()

        pygame.display.update()


menu()
